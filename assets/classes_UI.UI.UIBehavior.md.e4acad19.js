import{_ as e,c as t,o as a,a as r}from"./app.8e21f956.js";const u=JSON.parse('{"title":"Class: UIBehavior","description":"","frontmatter":{},"headers":[{"level":2,"title":"Table of contents","slug":"table-of-contents","link":"#table-of-contents","children":[{"level":3,"title":"Constructors","slug":"constructors","link":"#constructors","children":[]},{"level":3,"title":"Accessors","slug":"accessors","link":"#accessors","children":[]},{"level":3,"title":"Methods","slug":"methods","link":"#methods","children":[]}]},{"level":2,"title":"Constructors","slug":"constructors-1","link":"#constructors-1","children":[{"level":3,"title":"constructor","slug":"constructor","link":"#constructor","children":[]}]},{"level":2,"title":"Accessors","slug":"accessors-1","link":"#accessors-1","children":[{"level":3,"title":"canUpdate","slug":"canupdate","link":"#canupdate","children":[]},{"level":3,"title":"fullScreen","slug":"fullscreen","link":"#fullscreen","children":[]},{"level":3,"title":"layer","slug":"layer","link":"#layer","children":[]},{"level":3,"title":"rootCanvas","slug":"rootcanvas","link":"#rootcanvas","children":[]},{"level":3,"title":"uiObject","slug":"uiobject","link":"#uiobject","children":[]},{"level":3,"title":"uiWidgetBase","slug":"uiwidgetbase","link":"#uiwidgetbase","children":[]},{"level":3,"title":"visible","slug":"visible","link":"#visible","children":[]}]},{"level":2,"title":"Methods","slug":"methods-1","link":"#methods-1","children":[{"level":3,"title":"destroy","slug":"destroy","link":"#destroy","children":[]},{"level":3,"title":"detectDrag","slug":"detectdrag","link":"#detectdrag","children":[]},{"level":3,"title":"detectDragIfPressed","slug":"detectdragifpressed","link":"#detectdragifpressed","children":[]},{"level":3,"title":"newDragDrop","slug":"newdragdrop","link":"#newdragdrop","children":[]},{"level":3,"title":"setVisible","slug":"setvisible","link":"#setvisible","children":[]},{"level":3,"title":"addBehavior","slug":"addbehavior","link":"#addbehavior","children":[]},{"level":3,"title":"clearBehavior","slug":"clearbehavior","link":"#clearbehavior","children":[]},{"level":3,"title":"getBehavior","slug":"getbehavior","link":"#getbehavior","children":[]},{"level":3,"title":"removeBehavior","slug":"removebehavior","link":"#removebehavior","children":[]}]}],"relativePath":"classes/UI.UI.UIBehavior.md"}'),d={name:"classes/UI.UI.UIBehavior.md"},n=r(`<p><a href="./../README.html">auto-mwapi-lib</a> / <a href="./../modules.html">Exports</a> / <a href="./../modules/UI.html">UI</a> / <a href="./../modules/UI.UI.html">UI</a> / UIBehavior</p><h1 id="class-uibehavior" tabindex="-1">Class: UIBehavior <a class="header-anchor" href="#class-uibehavior" aria-hidden="true">#</a></h1><p><a href="./../modules/UI.html">UI</a>.<a href="./../modules/UI.UI.html">UI</a>.UIBehavior</p><p><strong><code>Author</code></strong></p><p>jie.wu</p><p><strong><code>Description</code></strong></p><p>UI 的驱动脚本基类</p><p><strong><code>Network Status</code></strong></p><p>usage:客户端</p><h2 id="table-of-contents" tabindex="-1">Table of contents <a class="header-anchor" href="#table-of-contents" aria-hidden="true">#</a></h2><h3 id="constructors" tabindex="-1">Constructors <a class="header-anchor" href="#constructors" aria-hidden="true">#</a></h3><ul><li><a href="./UI.UI.UIBehavior.html#constructor">constructor</a></li></ul><h3 id="accessors" tabindex="-1">Accessors <a class="header-anchor" href="#accessors" aria-hidden="true">#</a></h3><ul><li><a href="./UI.UI.UIBehavior.html#canupdate">canUpdate</a></li><li><a href="./UI.UI.UIBehavior.html#fullscreen">fullScreen</a></li><li><a href="./UI.UI.UIBehavior.html#layer">layer</a></li><li><a href="./UI.UI.UIBehavior.html#rootcanvas">rootCanvas</a></li><li><a href="./UI.UI.UIBehavior.html#uiobject">uiObject</a></li><li><a href="./UI.UI.UIBehavior.html#uiwidgetbase">uiWidgetBase</a></li><li><a href="./UI.UI.UIBehavior.html#visible">visible</a></li></ul><h3 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-hidden="true">#</a></h3><ul><li><a href="./UI.UI.UIBehavior.html#destroy">destroy</a></li><li><a href="./UI.UI.UIBehavior.html#detectdrag">detectDrag</a></li><li><a href="./UI.UI.UIBehavior.html#detectdragifpressed">detectDragIfPressed</a></li><li><a href="./UI.UI.UIBehavior.html#newdragdrop">newDragDrop</a></li><li><a href="./UI.UI.UIBehavior.html#setvisible">setVisible</a></li><li><a href="./UI.UI.UIBehavior.html#addbehavior">addBehavior</a></li><li><a href="./UI.UI.UIBehavior.html#clearbehavior">clearBehavior</a></li><li><a href="./UI.UI.UIBehavior.html#getbehavior">getBehavior</a></li><li><a href="./UI.UI.UIBehavior.html#removebehavior">removeBehavior</a></li></ul><h2 id="constructors-1" tabindex="-1">Constructors <a class="header-anchor" href="#constructors-1" aria-hidden="true">#</a></h2><h3 id="constructor" tabindex="-1">constructor <a class="header-anchor" href="#constructor" aria-hidden="true">#</a></h3><p>• <strong>new UIBehavior</strong>()</p><h2 id="accessors-1" tabindex="-1">Accessors <a class="header-anchor" href="#accessors-1" aria-hidden="true">#</a></h2><h3 id="canupdate" tabindex="-1">canUpdate <a class="header-anchor" href="#canupdate" aria-hidden="true">#</a></h3><p>• <code>get</code> <strong>canUpdate</strong>(): <code>boolean</code></p><p><strong><code>Description</code></strong></p><p>是否能触发 onUpdate 函数</p><p><strong><code>Effect</code></strong></p><p>只在客户端调用生效</p><h4 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-hidden="true">#</a></h4><p><code>boolean</code></p><p>返回能否触发的标志</p><h4 id="defined-in" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in" aria-hidden="true">#</a></h4><p>UI/index.d.ts:2680</p><p>• <code>set</code> <strong>canUpdate</strong>(<code>bCanUpdate</code>): <code>void</code></p><p><strong><code>Description</code></strong></p><p>设置是否能触发 onUpdate 函数</p><p><strong><code>Effect</code></strong></p><p>只在客户端调用生效</p><h4 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>bCanUpdate</code></td><td style="text-align:left;"><code>boolean</code></td><td style="text-align:left;">usage:能否触发的标志</td></tr></tbody></table><h4 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-hidden="true">#</a></h4><p><code>void</code></p><h4 id="defined-in-1" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-1" aria-hidden="true">#</a></h4><p>UI/index.d.ts:2686</p><hr><h3 id="fullscreen" tabindex="-1">fullScreen <a class="header-anchor" href="#fullscreen" aria-hidden="true">#</a></h3><p>• <code>set</code> <strong>fullScreen</strong>(<code>inFull</code>): <code>void</code></p><p><strong><code>Description</code></strong></p><p>设置随父节点全屏适配,会验证父节点大小以保证跟随父节点的大小</p><p><strong><code>Effect</code></strong></p><p>只在客户端调用生效</p><h4 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>inFull</code></td><td style="text-align:left;"><code>boolean</code></td><td style="text-align:left;">usage: 设置为随父节点大小全屏适配</td></tr></tbody></table><h4 id="returns-2" tabindex="-1">Returns <a class="header-anchor" href="#returns-2" aria-hidden="true">#</a></h4><p><code>void</code></p><h4 id="defined-in-2" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-2" aria-hidden="true">#</a></h4><p>UI/index.d.ts:2709</p><hr><h3 id="layer" tabindex="-1">layer <a class="header-anchor" href="#layer" aria-hidden="true">#</a></h3><p>• <code>get</code> <strong>layer</strong>(): <code>number</code></p><p><strong><code>Description</code></strong></p><p>获取 UI 的 Layer 层级,显示可能会影响到 zOrder,使用 UIManager 显示 UI 时， 会根据 Layer 层级动态设置 zOrder，每一次调用都会重新计算当前 layer 的新 zOrder，确保 UI 位于当前层级的顶端</p><p><strong><code>Effect</code></strong></p><p>只在客户端调用生效</p><p><strong><code>Example</code></strong></p><p>使用示例: 一般来说，可以使用内置定义好的，也可以是自定义拓展层级</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">Extension.UIManager.Instance.show(UIBehavior,UIBehavior.layer)</span></span>
<span class="line"><span style="color:#A6ACCD;">// 内置定义好的层级</span></span>
<span class="line"><span style="color:#A6ACCD;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">Extension.UILayerScene,  //场景层 zOrder开始于0</span></span>
<span class="line"><span style="color:#A6ACCD;">Extension.UILayerBottom, //底层 zOrder开始于100000</span></span>
<span class="line"><span style="color:#A6ACCD;">Extension.UILayerMiddle, //中层 zOrder开始于200000</span></span>
<span class="line"><span style="color:#A6ACCD;">Extension.UILayerOwn     //独享层(调用此层会自动隐藏Bottom和Middle层) zOrder开始于300000</span></span>
<span class="line"><span style="color:#A6ACCD;">Extension.UILayerTop     //顶层 zOrder开始于400000</span></span>
<span class="line"><span style="color:#A6ACCD;">Extension.UILayerDialog  //对话层 zOrder开始于500000</span></span>
<span class="line"><span style="color:#A6ACCD;">Extension.UILayerSystem  //系统层 zOrder开始于600000</span></span>
<span class="line"><span style="color:#A6ACCD;">Extension.UILayerError   //错误层 这个层级不可以使用，需要增加层级可以使用Extension.UIManager.Instance.addUILayerMap zOrder开始于700000</span></span>
<span class="line"><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h4 id="returns-3" tabindex="-1">Returns <a class="header-anchor" href="#returns-3" aria-hidden="true">#</a></h4><p><code>number</code></p><p>Layer 层级</p><h4 id="defined-in-3" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-3" aria-hidden="true">#</a></h4><p>UI/index.d.ts:2763</p><p>• <code>set</code> <strong>layer</strong>(<code>inLayer</code>): <code>void</code></p><p><strong><code>Description</code></strong></p><p>设置 UI 的所在的 Layer 层级,显示可能会影响到 zOrder,使用 UIManager 显示 UI 时， 会根据 Layer 层级动态设置 zOrder，每一次调用都会重新计算当前 layer 的新 zOrder，确保 UI 位于当前层级的顶端</p><p><strong><code>Effect</code></strong></p><p>只在客户端调用生效</p><p><strong><code>Example</code></strong></p><p>使用示例: 一般来说，可以使用内置定义好的，也可以自定义拓展层级</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">this.layer = Extension.UILayerScene;</span></span>
<span class="line"><span style="color:#A6ACCD;">// 内置定义好的层级</span></span>
<span class="line"><span style="color:#A6ACCD;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">Extension.UILayerScene,  //场景层 zOrder开始于0</span></span>
<span class="line"><span style="color:#A6ACCD;">Extension.UILayerBottom, //底层 zOrder开始于100000</span></span>
<span class="line"><span style="color:#A6ACCD;">Extension.UILayerMiddle, //中层 zOrder开始于200000</span></span>
<span class="line"><span style="color:#A6ACCD;">Extension.UILayerOwn     //独享层(调用此层会自动隐藏Bottom和Middle层) zOrder开始于300000</span></span>
<span class="line"><span style="color:#A6ACCD;">Extension.UILayerTop     //顶层 zOrder开始于400000</span></span>
<span class="line"><span style="color:#A6ACCD;">Extension.UILayerDialog  //对话层 zOrder开始于500000</span></span>
<span class="line"><span style="color:#A6ACCD;">Extension.UILayerSystem  //系统层 zOrder开始于600000</span></span>
<span class="line"><span style="color:#A6ACCD;">Extension.UILayerError   //错误层 这个层级不可以使用，需要增加层级可以使用Extension.UIManager.Instance.addUILayerMap zOrder开始于700000</span></span>
<span class="line"><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h4 id="parameters-2" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-2" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>inLayer</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">usage: 设置 Layer 层级</td></tr></tbody></table><h4 id="returns-4" tabindex="-1">Returns <a class="header-anchor" href="#returns-4" aria-hidden="true">#</a></h4><p><code>void</code></p><h4 id="defined-in-4" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-4" aria-hidden="true">#</a></h4><p>UI/index.d.ts:2740</p><hr><h3 id="rootcanvas" tabindex="-1">rootCanvas <a class="header-anchor" href="#rootcanvas" aria-hidden="true">#</a></h3><p>• <code>get</code> <strong>rootCanvas</strong>(): <a href="./UI.UI.Canvas.html"><code>Canvas</code></a></p><p><strong><code>Description</code></strong></p><p>获取 UI 的根 Canvas 节点</p><p><strong><code>Effect</code></strong></p><p>只在客户端调用生效</p><h4 id="returns-5" tabindex="-1">Returns <a class="header-anchor" href="#returns-5" aria-hidden="true">#</a></h4><p><a href="./UI.UI.Canvas.html"><code>Canvas</code></a></p><p>返回 canvas 节点</p><h4 id="defined-in-5" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-5" aria-hidden="true">#</a></h4><p>UI/index.d.ts:2769</p><hr><h3 id="uiobject" tabindex="-1">uiObject <a class="header-anchor" href="#uiobject" aria-hidden="true">#</a></h3><p>• <code>get</code> <strong>uiObject</strong>(): <a href="./UI.UI.Widget.html"><code>Widget</code></a></p><p><strong><code>Description</code></strong></p><p>获取脚本挂载的 UI 对象</p><h4 id="returns-6" tabindex="-1">Returns <a class="header-anchor" href="#returns-6" aria-hidden="true">#</a></h4><p><a href="./UI.UI.Widget.html"><code>Widget</code></a></p><p>脚本挂载的 UI 对象</p><h4 id="defined-in-6" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-6" aria-hidden="true">#</a></h4><p>UI/index.d.ts:2668</p><hr><h3 id="uiwidgetbase" tabindex="-1">uiWidgetBase <a class="header-anchor" href="#uiwidgetbase" aria-hidden="true">#</a></h3><p>• <code>get</code> <strong>uiWidgetBase</strong>(): <a href="./UI.UI.UserWidget.html"><code>UserWidget</code></a></p><p><strong><code>Description</code></strong></p><p>转化 UIObject 为指定 UserWidget 对象</p><p><strong><code>Effect</code></strong></p><p>只在客户端调用生效</p><h4 id="returns-7" tabindex="-1">Returns <a class="header-anchor" href="#returns-7" aria-hidden="true">#</a></h4><p><a href="./UI.UI.UserWidget.html"><code>UserWidget</code></a></p><p>返回转化指定 UserWidget 对象</p><h4 id="defined-in-7" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-7" aria-hidden="true">#</a></h4><p>UI/index.d.ts:2674</p><hr><h3 id="visible" tabindex="-1">visible <a class="header-anchor" href="#visible" aria-hidden="true">#</a></h3><p>• <code>get</code> <strong>visible</strong>(): <code>boolean</code></p><p><strong><code>Description</code></strong></p><p>获取 UI 是否显示</p><p><strong><code>Effect</code></strong></p><p>只在客户端调用生效</p><h4 id="returns-8" tabindex="-1">Returns <a class="header-anchor" href="#returns-8" aria-hidden="true">#</a></h4><p><code>boolean</code></p><p>返回是否可见</p><h4 id="defined-in-8" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-8" aria-hidden="true">#</a></h4><p>UI/index.d.ts:2697</p><p>• <code>set</code> <strong>visible</strong>(<code>inVisible</code>): <code>void</code></p><p><strong><code>Description</code></strong></p><p>设置 UI 是否显示,会触发绑定的脚本的 OnShow/OnHide 事件，需要传递参数的可以使用 setVisible 方法</p><p><strong><code>Effect</code></strong></p><p>只在客户端调用生效</p><h4 id="parameters-3" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-3" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>inVisible</code></td><td style="text-align:left;"><code>boolean</code></td><td style="text-align:left;">usage: 设置是否可见 可见设置为 SelfHitTestInvisible,不可见设置为 Collapsed</td></tr></tbody></table><h4 id="returns-9" tabindex="-1">Returns <a class="header-anchor" href="#returns-9" aria-hidden="true">#</a></h4><p><code>void</code></p><h4 id="defined-in-9" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-9" aria-hidden="true">#</a></h4><p>UI/index.d.ts:2703</p><h2 id="methods-1" tabindex="-1">Methods <a class="header-anchor" href="#methods-1" aria-hidden="true">#</a></h2><h3 id="destroy" tabindex="-1">destroy <a class="header-anchor" href="#destroy" aria-hidden="true">#</a></h3><p>▸ <strong>destroy</strong>(): <code>void</code></p><p><strong><code>Description</code></strong></p><p>销毁 UI 对象</p><p><strong><code>Effect</code></strong></p><p>只在客户端调用生效</p><h4 id="returns-10" tabindex="-1">Returns <a class="header-anchor" href="#returns-10" aria-hidden="true">#</a></h4><p><code>void</code></p><h4 id="defined-in-10" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-10" aria-hidden="true">#</a></h4><p>UI/index.d.ts:2691</p><hr><h3 id="detectdrag" tabindex="-1">detectDrag <a class="header-anchor" href="#detectdrag" aria-hidden="true">#</a></h3><p>▸ <strong>detectDrag</strong>(<code>dragKey</code>): <a href="./UI.UI.EventReply.html"><code>EventReply</code></a></p><p><strong><code>Description</code></strong></p><p>触发 DragDrop 事件的检测</p><p><strong><code>Effect</code></strong></p><p>只在客户端调用生效</p><h4 id="parameters-4" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-4" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>dragKey</code></td><td style="text-align:left;"><a href="./../enums/Type.Type.Keys.html"><code>Keys</code></a></td><td style="text-align:left;">usage:触发按键 default:Type.Keys</td></tr></tbody></table><h4 id="returns-11" tabindex="-1">Returns <a class="header-anchor" href="#returns-11" aria-hidden="true">#</a></h4><p><a href="./UI.UI.EventReply.html"><code>EventReply</code></a></p><p>返回触发的事件回复</p><h4 id="defined-in-11" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-11" aria-hidden="true">#</a></h4><p>UI/index.d.ts:2776</p><hr><h3 id="detectdragifpressed" tabindex="-1">detectDragIfPressed <a class="header-anchor" href="#detectdragifpressed" aria-hidden="true">#</a></h3><p>▸ <strong>detectDragIfPressed</strong>(<code>inPointEvent</code>, <code>dragKey</code>): <a href="./UI.UI.EventReply.html"><code>EventReply</code></a></p><p><strong><code>Description</code></strong></p><p>如果事件检测通过就触发 DragDrop 事件的回复</p><p><strong><code>Effect</code></strong></p><p>只在客户端调用生效</p><h4 id="parameters-5" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-5" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>inPointEvent</code></td><td style="text-align:left;"><a href="./UI.UI.PointerEvent.html"><code>PointerEvent</code></a></td><td style="text-align:left;">usage:传递触发的事件信息</td></tr><tr><td style="text-align:left;"><code>dragKey</code></td><td style="text-align:left;"><a href="./../enums/Type.Type.Keys.html"><code>Keys</code></a></td><td style="text-align:left;">usage:触发按键</td></tr></tbody></table><h4 id="returns-12" tabindex="-1">Returns <a class="header-anchor" href="#returns-12" aria-hidden="true">#</a></h4><p><a href="./UI.UI.EventReply.html"><code>EventReply</code></a></p><p>返回触发的事件回复</p><h4 id="defined-in-12" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-12" aria-hidden="true">#</a></h4><p>UI/index.d.ts:2784</p><hr><h3 id="newdragdrop" tabindex="-1">newDragDrop <a class="header-anchor" href="#newdragdrop" aria-hidden="true">#</a></h3><p>▸ <strong>newDragDrop</strong>(<code>inVisualWidget</code>, <code>inTag?</code>, <code>inPayLoad?</code>, <code>inPivot?</code>, <code>inOffset?</code>): <a href="./UI.UI.DragDropOperation.html"><code>DragDropOperation</code></a></p><p><strong><code>Description</code></strong></p><p>创建 DragDrop 事件</p><p><strong><code>Effect</code></strong></p><p>只在客户端调用生效</p><h4 id="parameters-6" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-6" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>inVisualWidget</code></td><td style="text-align:left;"><a href="./UI.UI.Widget.html"><code>Widget</code></a></td><td style="text-align:left;">usage:拖拽显示的 UI 控件</td></tr><tr><td style="text-align:left;"><code>inTag?</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">usage:标签文本 default:&quot;&quot;</td></tr><tr><td style="text-align:left;"><code>inPayLoad?</code></td><td style="text-align:left;"><code>any</code></td><td style="text-align:left;">usage:拖拽事件数据信息 default:null</td></tr><tr><td style="text-align:left;"><code>inPivot?</code></td><td style="text-align:left;"><a href="./../enums/UI.UI.DragPivot.html"><code>DragPivot</code></a></td><td style="text-align:left;">usage:拖拽显示 UI 的锚点 default:UIType.DragPivot.TopLeft</td></tr><tr><td style="text-align:left;"><code>inOffset?</code></td><td style="text-align:left;"><a href="./Type.Type.Vector2.html"><code>Vector2</code></a></td><td style="text-align:left;">usage:拖拽显示 UI 相对于锚点的偏移 default:vector2(0,0)</td></tr></tbody></table><h4 id="returns-13" tabindex="-1">Returns <a class="header-anchor" href="#returns-13" aria-hidden="true">#</a></h4><p><a href="./UI.UI.DragDropOperation.html"><code>DragDropOperation</code></a></p><p>返回触发的事件回复</p><h4 id="defined-in-13" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-13" aria-hidden="true">#</a></h4><p>UI/index.d.ts:2798</p><hr><h3 id="setvisible" tabindex="-1">setVisible <a class="header-anchor" href="#setvisible" aria-hidden="true">#</a></h3><p>▸ <strong>setVisible</strong>(<code>inVisible</code>, <code>...params</code>): <code>void</code></p><p><strong><code>Description</code></strong></p><p>设置 UI 是否显示,会触发绑定的脚本的 OnShow/OnHide 事件，可以传递参数</p><p><strong><code>Effect</code></strong></p><p>只在客户端调用生效</p><h4 id="parameters-7" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-7" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>inVisible</code></td><td style="text-align:left;"><code>boolean</code> | <a href="./../enums/UI.UI.SlateVisibility.html"><code>SlateVisibility</code></a></td><td style="text-align:left;">usage: 设置是否可见,如果是 boolean 类型设置为 SelfHitTestInvisible,不可见设置为 Collapsed， 否则的话就是按照枚举拉设置具体的显示类型</td></tr><tr><td style="text-align:left;"><code>...params</code></td><td style="text-align:left;"><code>any</code>[]</td><td style="text-align:left;">usage: 传递给 onShow 的参数</td></tr></tbody></table><h4 id="returns-14" tabindex="-1">Returns <a class="header-anchor" href="#returns-14" aria-hidden="true">#</a></h4><p><code>void</code></p><h4 id="defined-in-14" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-14" aria-hidden="true">#</a></h4><p>UI/index.d.ts:2717</p><hr><h3 id="addbehavior" tabindex="-1">addBehavior <a class="header-anchor" href="#addbehavior" aria-hidden="true">#</a></h3><p>▸ <code>Static</code> <strong>addBehavior</strong>(<code>key</code>, <code>value</code>): <code>void</code></p><p><strong><code>Description</code></strong></p><p>添加一个全局的行为记录</p><p><strong><code>Effect</code></strong></p><p>只在客户端调用生效</p><h4 id="parameters-8" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-8" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>key</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">usage: 行为标记</td></tr><tr><td style="text-align:left;"><code>value</code></td><td style="text-align:left;"><code>any</code></td><td style="text-align:left;">usage: 行为值</td></tr></tbody></table><h4 id="returns-15" tabindex="-1">Returns <a class="header-anchor" href="#returns-15" aria-hidden="true">#</a></h4><p><code>void</code></p><h4 id="defined-in-15" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-15" aria-hidden="true">#</a></h4><p>UI/index.d.ts:2645</p><hr><h3 id="clearbehavior" tabindex="-1">clearBehavior <a class="header-anchor" href="#clearbehavior" aria-hidden="true">#</a></h3><p>▸ <code>Static</code> <strong>clearBehavior</strong>(): <code>void</code></p><p><strong><code>Description</code></strong></p><p>清空全局的行为记录</p><p><strong><code>Effect</code></strong></p><p>只在客户端调用生效</p><h4 id="returns-16" tabindex="-1">Returns <a class="header-anchor" href="#returns-16" aria-hidden="true">#</a></h4><p><code>void</code></p><h4 id="defined-in-16" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-16" aria-hidden="true">#</a></h4><p>UI/index.d.ts:2656</p><hr><h3 id="getbehavior" tabindex="-1">getBehavior <a class="header-anchor" href="#getbehavior" aria-hidden="true">#</a></h3><p>▸ <code>Static</code> <strong>getBehavior</strong>(<code>key</code>): <code>any</code></p><p><strong><code>Description</code></strong></p><p>获取一个全局的行为记录</p><p><strong><code>Effect</code></strong></p><p>只在客户端调用生效</p><h4 id="parameters-9" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-9" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>key</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">usage: 行为标记</td></tr></tbody></table><h4 id="returns-17" tabindex="-1">Returns <a class="header-anchor" href="#returns-17" aria-hidden="true">#</a></h4><p><code>any</code></p><p>返回一个行为</p><h4 id="defined-in-17" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-17" aria-hidden="true">#</a></h4><p>UI/index.d.ts:2663</p><hr><h3 id="removebehavior" tabindex="-1">removeBehavior <a class="header-anchor" href="#removebehavior" aria-hidden="true">#</a></h3><p>▸ <code>Static</code> <strong>removeBehavior</strong>(<code>key</code>): <code>void</code></p><p><strong><code>Description</code></strong></p><p>移除一个全局的行为记录</p><p><strong><code>Effect</code></strong></p><p>只在客户端调用生效</p><h4 id="parameters-10" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-10" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>key</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">usage: 行为标记</td></tr></tbody></table><h4 id="returns-18" tabindex="-1">Returns <a class="header-anchor" href="#returns-18" aria-hidden="true">#</a></h4><p><code>void</code></p><h4 id="defined-in-18" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-18" aria-hidden="true">#</a></h4><p>UI/index.d.ts:2651</p>`,258),s=[n];function i(o,l,c,h,p,g){return a(),t("div",null,s)}const y=e(d,[["render",i]]);export{u as __pageData,y as default};
