import{_ as e,c as t,o as a,a as d}from"./app.8e21f956.js";const x=JSON.parse('{"title":"Class: ObjPool<T>","description":"","frontmatter":{},"headers":[{"level":2,"title":"Type parameters","slug":"type-parameters","link":"#type-parameters","children":[]},{"level":2,"title":"Table of contents","slug":"table-of-contents","link":"#table-of-contents","children":[{"level":3,"title":"Constructors","slug":"constructors","link":"#constructors","children":[]},{"level":3,"title":"Methods","slug":"methods","link":"#methods","children":[]}]},{"level":2,"title":"Constructors","slug":"constructors-1","link":"#constructors-1","children":[{"level":3,"title":"constructor","slug":"constructor","link":"#constructor","children":[]}]},{"level":2,"title":"Methods","slug":"methods-1","link":"#methods-1","children":[{"level":3,"title":"clear","slug":"clear","link":"#clear","children":[]},{"level":3,"title":"despawn","slug":"despawn","link":"#despawn","children":[]},{"level":3,"title":"spawn","slug":"spawn","link":"#spawn","children":[]}]}],"relativePath":"classes/Extension.Extension.ObjPool.md"}'),n={name:"classes/Extension.Extension.ObjPool.md"},o=d('<p><a href="./../README.html">auto-mwapi-lib</a> / <a href="./../modules.html">Exports</a> / <a href="./../modules/Extension.html">Extension</a> / <a href="./../modules/Extension.Extension.html">Extension</a> / ObjPool</p><h1 id="class-objpool-t" tabindex="-1">Class: ObjPool&lt;T&gt; <a class="header-anchor" href="#class-objpool-t" aria-hidden="true">#</a></h1><p><a href="./../modules/Extension.html">Extension</a>.<a href="./../modules/Extension.Extension.html">Extension</a>.ObjPool</p><p><strong><code>Author</code></strong></p><p>huipeng.jia</p><p><strong><code>Description</code></strong></p><p>对象池</p><p><strong><code>Network Status</code></strong></p><p>usage: 双端</p><h2 id="type-parameters" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters" aria-hidden="true">#</a></h2><table><thead><tr><th style="text-align:left;">Name</th></tr></thead><tbody><tr><td style="text-align:left;"><code>T</code></td></tr></tbody></table><h2 id="table-of-contents" tabindex="-1">Table of contents <a class="header-anchor" href="#table-of-contents" aria-hidden="true">#</a></h2><h3 id="constructors" tabindex="-1">Constructors <a class="header-anchor" href="#constructors" aria-hidden="true">#</a></h3><ul><li><a href="./Extension.Extension.ObjPool.html#constructor">constructor</a></li></ul><h3 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-hidden="true">#</a></h3><ul><li><a href="./Extension.Extension.ObjPool.html#clear">clear</a></li><li><a href="./Extension.Extension.ObjPool.html#despawn">despawn</a></li><li><a href="./Extension.Extension.ObjPool.html#spawn">spawn</a></li></ul><h2 id="constructors-1" tabindex="-1">Constructors <a class="header-anchor" href="#constructors-1" aria-hidden="true">#</a></h2><h3 id="constructor" tabindex="-1">constructor <a class="header-anchor" href="#constructor" aria-hidden="true">#</a></h3><p>• <strong>new ObjPool</strong>&lt;<code>T</code>&gt;(<code>createObj</code>, <code>onReset</code>, <code>onDestroy</code>, <code>initNum?</code>)</p><p><strong><code>Description</code></strong></p><p>构造一个对象池</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><h4 id="type-parameters-1" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters-1" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th></tr></thead><tbody><tr><td style="text-align:left;"><code>T</code></td></tr></tbody></table><h4 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>createObj</code></td><td style="text-align:left;">() =&gt; <code>T</code></td><td style="text-align:left;">usage: 创建新对象的回调</td></tr><tr><td style="text-align:left;"><code>onReset</code></td><td style="text-align:left;">(<code>obj</code>: <code>T</code>) =&gt; <code>void</code></td><td style="text-align:left;">usage: 重置对象的回调</td></tr><tr><td style="text-align:left;"><code>onDestroy</code></td><td style="text-align:left;">(<code>obj</code>: <code>T</code>) =&gt; <code>void</code></td><td style="text-align:left;">usage: 销毁对象的回调</td></tr><tr><td style="text-align:left;"><code>initNum?</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">usage: 默认缓存对象数量 default: 2</td></tr></tbody></table><h4 id="defined-in" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in" aria-hidden="true">#</a></h4><p>Extension/index.d.ts:55</p><h2 id="methods-1" tabindex="-1">Methods <a class="header-anchor" href="#methods-1" aria-hidden="true">#</a></h2><h3 id="clear" tabindex="-1">clear <a class="header-anchor" href="#clear" aria-hidden="true">#</a></h3><p>▸ <strong>clear</strong>(): <code>void</code></p><p><strong><code>Description</code></strong></p><p>清除池中对象</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><h4 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-hidden="true">#</a></h4><p><code>void</code></p><h4 id="defined-in-1" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-1" aria-hidden="true">#</a></h4><p>Extension/index.d.ts:77</p><hr><h3 id="despawn" tabindex="-1">despawn <a class="header-anchor" href="#despawn" aria-hidden="true">#</a></h3><p>▸ <strong>despawn</strong>(<code>obj</code>): <code>void</code></p><p><strong><code>Description</code></strong></p><p>归还一个对象</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><h4 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>obj</code></td><td style="text-align:left;"><code>T</code></td><td style="text-align:left;">usage: 对象</td></tr></tbody></table><h4 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-hidden="true">#</a></h4><p><code>void</code></p><h4 id="defined-in-2" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-2" aria-hidden="true">#</a></h4><p>Extension/index.d.ts:72</p><hr><h3 id="spawn" tabindex="-1">spawn <a class="header-anchor" href="#spawn" aria-hidden="true">#</a></h3><p>▸ <strong>spawn</strong>(): <code>T</code></p><p><strong><code>Description</code></strong></p><p>生成一个对象</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><h4 id="returns-2" tabindex="-1">Returns <a class="header-anchor" href="#returns-2" aria-hidden="true">#</a></h4><p><code>T</code></p><p>对象</p><h4 id="defined-in-3" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-3" aria-hidden="true">#</a></h4><p>Extension/index.d.ts:66</p>',65),r=[o];function s(i,l,c,h,p,f){return a(),t("div",null,r)}const g=e(n,[["render",s]]);export{x as __pageData,g as default};
