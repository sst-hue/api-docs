import{_ as e,c as t,o as a,a as r}from"./app.8e21f956.js";const g=JSON.parse('{"title":"Class: Quaternion","description":"","frontmatter":{},"headers":[{"level":2,"title":"Table of contents","slug":"table-of-contents","link":"#table-of-contents","children":[{"level":3,"title":"Constructors","slug":"constructors","link":"#constructors","children":[]},{"level":3,"title":"Properties","slug":"properties","link":"#properties","children":[]},{"level":3,"title":"Accessors","slug":"accessors","link":"#accessors","children":[]},{"level":3,"title":"Methods","slug":"methods","link":"#methods","children":[]}]},{"level":2,"title":"Constructors","slug":"constructors-1","link":"#constructors-1","children":[{"level":3,"title":"constructor","slug":"constructor","link":"#constructor","children":[]}]},{"level":2,"title":"Properties","slug":"properties-1","link":"#properties-1","children":[{"level":3,"title":"w","slug":"w","link":"#w","children":[]},{"level":3,"title":"x","slug":"x","link":"#x","children":[]},{"level":3,"title":"y","slug":"y","link":"#y","children":[]},{"level":3,"title":"z","slug":"z","link":"#z","children":[]},{"level":3,"title":"halfToRad","slug":"halftorad","link":"#halftorad","children":[]}]},{"level":2,"title":"Accessors","slug":"accessors-1","link":"#accessors-1","children":[{"level":3,"title":"conjugated","slug":"conjugated","link":"#conjugated","children":[]},{"level":3,"title":"inverted","slug":"inverted","link":"#inverted","children":[]},{"level":3,"title":"length","slug":"length","link":"#length","children":[]},{"level":3,"title":"normalized","slug":"normalized","link":"#normalized","children":[]},{"level":3,"title":"sqrLength","slug":"sqrlength","link":"#sqrlength","children":[]},{"level":3,"title":"identity","slug":"identity","link":"#identity","children":[]}]},{"level":2,"title":"Methods","slug":"methods-1","link":"#methods-1","children":[{"level":3,"title":"clone","slug":"clone","link":"#clone","children":[]},{"level":3,"title":"equals","slug":"equals","link":"#equals","children":[]},{"level":3,"title":"fromRotation","slug":"fromrotation","link":"#fromrotation","children":[]},{"level":3,"title":"getAxisX","slug":"getaxisx","link":"#getaxisx","children":[]},{"level":3,"title":"getAxisY","slug":"getaxisy","link":"#getaxisy","children":[]},{"level":3,"title":"getAxisZ","slug":"getaxisz","link":"#getaxisz","children":[]},{"level":3,"title":"getEuler","slug":"geteuler","link":"#geteuler","children":[]},{"level":3,"title":"getEulerAngles","slug":"geteulerangles","link":"#geteulerangles","children":[]},{"level":3,"title":"normalize","slug":"normalize","link":"#normalize","children":[]},{"level":3,"title":"set","slug":"set","link":"#set","children":[]},{"level":3,"title":"setEulerAngles","slug":"seteulerangles","link":"#seteulerangles","children":[]},{"level":3,"title":"strictEquals","slug":"strictequals","link":"#strictequals","children":[]},{"level":3,"title":"toRotation","slug":"torotation","link":"#torotation","children":[]},{"level":3,"title":"toString","slug":"tostring","link":"#tostring","children":[]},{"level":3,"title":"calculateW","slug":"calculatew","link":"#calculatew","children":[]},{"level":3,"title":"conjugate","slug":"conjugate","link":"#conjugate","children":[]},{"level":3,"title":"dot","slug":"dot","link":"#dot","children":[]},{"level":3,"title":"equals","slug":"equals-1","link":"#equals-1","children":[]},{"level":3,"title":"fromAngleZ","slug":"fromanglez","link":"#fromanglez","children":[]},{"level":3,"title":"fromAxes","slug":"fromaxes","link":"#fromaxes","children":[]},{"level":3,"title":"fromAxisAngle","slug":"fromaxisangle","link":"#fromaxisangle","children":[]},{"level":3,"title":"fromMatrix3x3","slug":"frommatrix3x3","link":"#frommatrix3x3","children":[]},{"level":3,"title":"fromRotation","slug":"fromrotation-1","link":"#fromrotation-1","children":[]},{"level":3,"title":"fromViewUp","slug":"fromviewup","link":"#fromviewup","children":[]},{"level":3,"title":"getAxis","slug":"getaxis","link":"#getaxis","children":[]},{"level":3,"title":"getAxisAngle","slug":"getaxisangle","link":"#getaxisangle","children":[]},{"level":3,"title":"invert","slug":"invert","link":"#invert","children":[]},{"level":3,"title":"lerp","slug":"lerp","link":"#lerp","children":[]},{"level":3,"title":"multiply","slug":"multiply","link":"#multiply","children":[]},{"level":3,"title":"multiplyVector","slug":"multiplyvector","link":"#multiplyvector","children":[]},{"level":3,"title":"normalize","slug":"normalize-1","link":"#normalize-1","children":[]},{"level":3,"title":"rotateAround","slug":"rotatearound","link":"#rotatearound","children":[]},{"level":3,"title":"rotateAroundLocal","slug":"rotatearoundlocal","link":"#rotatearoundlocal","children":[]},{"level":3,"title":"rotateX","slug":"rotatex","link":"#rotatex","children":[]},{"level":3,"title":"rotateY","slug":"rotatey","link":"#rotatey","children":[]},{"level":3,"title":"rotateZ","slug":"rotatez","link":"#rotatez","children":[]},{"level":3,"title":"rotationTo","slug":"rotationto","link":"#rotationto","children":[]},{"level":3,"title":"slerp","slug":"slerp","link":"#slerp","children":[]},{"level":3,"title":"sqlerp","slug":"sqlerp","link":"#sqlerp","children":[]},{"level":3,"title":"strictEquals","slug":"strictequals-1","link":"#strictequals-1","children":[]},{"level":3,"title":"toMatrix3x3","slug":"tomatrix3x3","link":"#tomatrix3x3","children":[]}]}],"relativePath":"classes/Type.Type.Quaternion.md"}'),d={name:"classes/Type.Type.Quaternion.md"},n=r('<p><a href="./../README.html">auto-mwapi-lib</a> / <a href="./../modules.html">Exports</a> / <a href="./../modules/Type.html">Type</a> / <a href="./../modules/Type.Type.html">Type</a> / Quaternion</p><h1 id="class-quaternion" tabindex="-1">Class: Quaternion <a class="header-anchor" href="#class-quaternion" aria-hidden="true">#</a></h1><p><a href="./../modules/Type.html">Type</a>.<a href="./../modules/Type.Type.html">Type</a>.Quaternion</p><p><strong><code>Author</code></strong></p><p>SuoWei</p><p><strong><code>Description</code></strong></p><p>四元数</p><p><strong><code>Network Status</code></strong></p><p>usage:双端</p><h2 id="table-of-contents" tabindex="-1">Table of contents <a class="header-anchor" href="#table-of-contents" aria-hidden="true">#</a></h2><h3 id="constructors" tabindex="-1">Constructors <a class="header-anchor" href="#constructors" aria-hidden="true">#</a></h3><ul><li><a href="./Type.Type.Quaternion.html#constructor">constructor</a></li></ul><h3 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-hidden="true">#</a></h3><ul><li><a href="./Type.Type.Quaternion.html#w">w</a></li><li><a href="./Type.Type.Quaternion.html#x">x</a></li><li><a href="./Type.Type.Quaternion.html#y">y</a></li><li><a href="./Type.Type.Quaternion.html#z">z</a></li><li><a href="./Type.Type.Quaternion.html#halftorad">halfToRad</a></li></ul><h3 id="accessors" tabindex="-1">Accessors <a class="header-anchor" href="#accessors" aria-hidden="true">#</a></h3><ul><li><a href="./Type.Type.Quaternion.html#conjugated">conjugated</a></li><li><a href="./Type.Type.Quaternion.html#inverted">inverted</a></li><li><a href="./Type.Type.Quaternion.html#length">length</a></li><li><a href="./Type.Type.Quaternion.html#normalized">normalized</a></li><li><a href="./Type.Type.Quaternion.html#sqrlength">sqrLength</a></li><li><a href="./Type.Type.Quaternion.html#identity">identity</a></li></ul><h3 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-hidden="true">#</a></h3><ul><li><a href="./Type.Type.Quaternion.html#clone">clone</a></li><li><a href="./Type.Type.Quaternion.html#equals">equals</a></li><li><a href="./Type.Type.Quaternion.html#fromrotation">fromRotation</a></li><li><a href="./Type.Type.Quaternion.html#getaxisx">getAxisX</a></li><li><a href="./Type.Type.Quaternion.html#getaxisy">getAxisY</a></li><li><a href="./Type.Type.Quaternion.html#getaxisz">getAxisZ</a></li><li><a href="./Type.Type.Quaternion.html#geteuler">getEuler</a></li><li><a href="./Type.Type.Quaternion.html#geteulerangles">getEulerAngles</a></li><li><a href="./Type.Type.Quaternion.html#normalize">normalize</a></li><li><a href="./Type.Type.Quaternion.html#set">set</a></li><li><a href="./Type.Type.Quaternion.html#seteulerangles">setEulerAngles</a></li><li><a href="./Type.Type.Quaternion.html#strictequals">strictEquals</a></li><li><a href="./Type.Type.Quaternion.html#torotation">toRotation</a></li><li><a href="./Type.Type.Quaternion.html#tostring">toString</a></li><li><a href="./Type.Type.Quaternion.html#calculatew">calculateW</a></li><li><a href="./Type.Type.Quaternion.html#conjugate">conjugate</a></li><li><a href="./Type.Type.Quaternion.html#dot">dot</a></li><li><a href="./Type.Type.Quaternion.html#equals-1">equals</a></li><li><a href="./Type.Type.Quaternion.html#fromanglez">fromAngleZ</a></li><li><a href="./Type.Type.Quaternion.html#fromaxes">fromAxes</a></li><li><a href="./Type.Type.Quaternion.html#fromaxisangle">fromAxisAngle</a></li><li><a href="./Type.Type.Quaternion.html#frommatrix3x3">fromMatrix3x3</a></li><li><a href="./Type.Type.Quaternion.html#fromrotation-1">fromRotation</a></li><li><a href="./Type.Type.Quaternion.html#fromviewup">fromViewUp</a></li><li><a href="./Type.Type.Quaternion.html#getaxis">getAxis</a></li><li><a href="./Type.Type.Quaternion.html#getaxisangle">getAxisAngle</a></li><li><a href="./Type.Type.Quaternion.html#invert">invert</a></li><li><a href="./Type.Type.Quaternion.html#lerp">lerp</a></li><li><a href="./Type.Type.Quaternion.html#multiply">multiply</a></li><li><a href="./Type.Type.Quaternion.html#multiplyvector">multiplyVector</a></li><li><a href="./Type.Type.Quaternion.html#normalize-1">normalize</a></li><li><a href="./Type.Type.Quaternion.html#rotatearound">rotateAround</a></li><li><a href="./Type.Type.Quaternion.html#rotatearoundlocal">rotateAroundLocal</a></li><li><a href="./Type.Type.Quaternion.html#rotatex">rotateX</a></li><li><a href="./Type.Type.Quaternion.html#rotatey">rotateY</a></li><li><a href="./Type.Type.Quaternion.html#rotatez">rotateZ</a></li><li><a href="./Type.Type.Quaternion.html#rotationto">rotationTo</a></li><li><a href="./Type.Type.Quaternion.html#slerp">slerp</a></li><li><a href="./Type.Type.Quaternion.html#sqlerp">sqlerp</a></li><li><a href="./Type.Type.Quaternion.html#strictequals-1">strictEquals</a></li><li><a href="./Type.Type.Quaternion.html#tomatrix3x3">toMatrix3x3</a></li></ul><h2 id="constructors-1" tabindex="-1">Constructors <a class="header-anchor" href="#constructors-1" aria-hidden="true">#</a></h2><h3 id="constructor" tabindex="-1">constructor <a class="header-anchor" href="#constructor" aria-hidden="true">#</a></h3><p>• <strong>new Quaternion</strong>(<code>v</code>)</p><h4 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>v</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:四元素</td></tr></tbody></table><h4 id="defined-in" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2290</p><p>• <strong>new Quaternion</strong>(<code>x?</code>, <code>y?</code>, <code>z?</code>, <code>w?</code>)</p><h4 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>x?</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">usage:x 分量 default:0</td></tr><tr><td style="text-align:left;"><code>y?</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">usage:y 分量 default:0</td></tr><tr><td style="text-align:left;"><code>z?</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">usage:z 分量 default:0</td></tr><tr><td style="text-align:left;"><code>w?</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">usage:w 分量 default:1</td></tr></tbody></table><h4 id="defined-in-1" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-1" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2297</p><h2 id="properties-1" tabindex="-1">Properties <a class="header-anchor" href="#properties-1" aria-hidden="true">#</a></h2><h3 id="w" tabindex="-1">w <a class="header-anchor" href="#w" aria-hidden="true">#</a></h3><p>• <strong>w</strong>: <code>number</code></p><p><strong><code>Description</code></strong></p><p>w 分量。</p><h4 id="defined-in-2" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-2" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2286</p><hr><h3 id="x" tabindex="-1">x <a class="header-anchor" href="#x" aria-hidden="true">#</a></h3><p>• <strong>x</strong>: <code>number</code></p><p><strong><code>Description</code></strong></p><p>x 分量。</p><h4 id="defined-in-3" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-3" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2274</p><hr><h3 id="y" tabindex="-1">y <a class="header-anchor" href="#y" aria-hidden="true">#</a></h3><p>• <strong>y</strong>: <code>number</code></p><p><strong><code>Description</code></strong></p><p>y 分量。</p><h4 id="defined-in-4" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-4" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2278</p><hr><h3 id="z" tabindex="-1">z <a class="header-anchor" href="#z" aria-hidden="true">#</a></h3><p>• <strong>z</strong>: <code>number</code></p><p><strong><code>Description</code></strong></p><p>z 分量。</p><h4 id="defined-in-5" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-5" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2282</p><hr><h3 id="halftorad" tabindex="-1">halfToRad <a class="header-anchor" href="#halftorad" aria-hidden="true">#</a></h3><p>▪ <code>Static</code> <code>Private</code> <strong>halfToRad</strong>: <code>any</code></p><p><strong><code>Description</code></strong></p><p>获取一个半弧度系数</p><h4 id="defined-in-6" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-6" aria-hidden="true">#</a></h4><p>Type/index.d.ts:1960</p><h2 id="accessors-1" tabindex="-1">Accessors <a class="header-anchor" href="#accessors-1" aria-hidden="true">#</a></h2><h3 id="conjugated" tabindex="-1">conjugated <a class="header-anchor" href="#conjugated" aria-hidden="true">#</a></h3><p>• <code>get</code> <strong>conjugated</strong>(): <a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p><strong><code>Description</code></strong></p><p>返回当前四元数的共轭四元数，对单位四元数与求逆等价，但更高效</p><h4 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-hidden="true">#</a></h4><p><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><h4 id="defined-in-7" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-7" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2367</p><hr><h3 id="inverted" tabindex="-1">inverted <a class="header-anchor" href="#inverted" aria-hidden="true">#</a></h3><p>• <code>get</code> <strong>inverted</strong>(): <a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p><strong><code>Description</code></strong></p><p>返回当前四元数的逆</p><h4 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-hidden="true">#</a></h4><p><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><h4 id="defined-in-8" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-8" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2363</p><hr><h3 id="length" tabindex="-1">length <a class="header-anchor" href="#length" aria-hidden="true">#</a></h3><p>• <code>get</code> <strong>length</strong>(): <code>number</code></p><p><strong><code>Description</code></strong></p><p>求四元数长度</p><h4 id="returns-2" tabindex="-1">Returns <a class="header-anchor" href="#returns-2" aria-hidden="true">#</a></h4><p><code>number</code></p><h4 id="defined-in-9" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-9" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2355</p><hr><h3 id="normalized" tabindex="-1">normalized <a class="header-anchor" href="#normalized" aria-hidden="true">#</a></h3><p>• <code>get</code> <strong>normalized</strong>(): <a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p><strong><code>Description</code></strong></p><p>返回一个当前四元数归一后的新四元数</p><h4 id="returns-3" tabindex="-1">Returns <a class="header-anchor" href="#returns-3" aria-hidden="true">#</a></h4><p><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><h4 id="defined-in-10" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-10" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2351</p><hr><h3 id="sqrlength" tabindex="-1">sqrLength <a class="header-anchor" href="#sqrlength" aria-hidden="true">#</a></h3><p>• <code>get</code> <strong>sqrLength</strong>(): <code>number</code></p><p><strong><code>Description</code></strong></p><p>求四元数长度平方</p><h4 id="returns-4" tabindex="-1">Returns <a class="header-anchor" href="#returns-4" aria-hidden="true">#</a></h4><p><code>number</code></p><h4 id="defined-in-11" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-11" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2359</p><hr><h3 id="identity" tabindex="-1">identity <a class="header-anchor" href="#identity" aria-hidden="true">#</a></h3><p>• <code>Static</code> <code>get</code> <strong>identity</strong>(): <a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p><strong><code>Description</code></strong></p><p>获取一个单位四元数</p><p><strong><code>Precautions</code></strong></p><p>Quaternion(0,0,0,1)</p><h4 id="returns-5" tabindex="-1">Returns <a class="header-anchor" href="#returns-5" aria-hidden="true">#</a></h4><p><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><h4 id="defined-in-12" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-12" aria-hidden="true">#</a></h4><p>Type/index.d.ts:1965</p><h2 id="methods-1" tabindex="-1">Methods <a class="header-anchor" href="#methods-1" aria-hidden="true">#</a></h2><h3 id="clone" tabindex="-1">clone <a class="header-anchor" href="#clone" aria-hidden="true">#</a></h3><p>▸ <strong>clone</strong>(): <a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p><strong><code>Description</code></strong></p><p>克隆当前四元数。</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><h4 id="returns-6" tabindex="-1">Returns <a class="header-anchor" href="#returns-6" aria-hidden="true">#</a></h4><p><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p>四元数</p><h4 id="defined-in-13" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-13" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2303</p><hr><h3 id="equals" tabindex="-1">equals <a class="header-anchor" href="#equals" aria-hidden="true">#</a></h3><p>▸ <strong>equals</strong>(<code>other</code>, <code>epsilon?</code>): <code>boolean</code></p><p><strong><code>Description</code></strong></p><p>判断当前四元数是否在误差范围内与指定向量相等。</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><h4 id="parameters-2" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-2" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>other</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:比对的目标四元数</td></tr><tr><td style="text-align:left;"><code>epsilon?</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">usage:容差值 default:MathDefine.EPSILON</td></tr></tbody></table><h4 id="returns-7" tabindex="-1">Returns <a class="header-anchor" href="#returns-7" aria-hidden="true">#</a></h4><p><code>boolean</code></p><p>比对后的结果</p><h4 id="defined-in-14" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-14" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2340</p><hr><h3 id="fromrotation" tabindex="-1">fromRotation <a class="header-anchor" href="#fromrotation" aria-hidden="true">#</a></h3><p>▸ <strong>fromRotation</strong>(<code>v</code>): <code>void</code></p><p><strong><code>Description</code></strong></p><p>当前四元数读取一个旋转数据</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><h4 id="parameters-3" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-3" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>v</code></td><td style="text-align:left;"><a href="./Type.Type.Rotation.html"><code>Rotation</code></a></td><td style="text-align:left;">usage:读取的旋转数据</td></tr></tbody></table><h4 id="returns-8" tabindex="-1">Returns <a class="header-anchor" href="#returns-8" aria-hidden="true">#</a></h4><p><code>void</code></p><h4 id="defined-in-15" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-15" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2411</p><hr><h3 id="getaxisx" tabindex="-1">getAxisX <a class="header-anchor" href="#getaxisx" aria-hidden="true">#</a></h3><p>▸ <strong>getAxisX</strong>(<code>outer?</code>): <a href="./Type.Type.Vector.html"><code>Vector</code></a></p><p><strong><code>Description</code></strong></p><p>返回定义此四元数的坐标系 X 轴向量</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><p><strong><code>Precautions</code></strong></p><p>如果 outer 不为空, 返回 outer,否则返回一个新的 Vector 对象, 建议传入 outer 来减少 new 对象且 outer 不能为 null/undefined</p><h4 id="parameters-4" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-4" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>outer?</code></td><td style="text-align:left;"><a href="./Type.Type.Vector.html"><code>Vector</code></a></td><td style="text-align:left;">usage:接收结果的 Vector 对象 default:null</td></tr></tbody></table><h4 id="returns-9" tabindex="-1">Returns <a class="header-anchor" href="#returns-9" aria-hidden="true">#</a></h4><p><a href="./Type.Type.Vector.html"><code>Vector</code></a></p><p>此四元数的坐标系 X 轴向量</p><h4 id="defined-in-16" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-16" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2380</p><hr><h3 id="getaxisy" tabindex="-1">getAxisY <a class="header-anchor" href="#getaxisy" aria-hidden="true">#</a></h3><p>▸ <strong>getAxisY</strong>(<code>outer?</code>): <a href="./Type.Type.Vector.html"><code>Vector</code></a></p><p><strong><code>Description</code></strong></p><p>返回定义此四元数的坐标系 Y 轴向量</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><p><strong><code>Precautions</code></strong></p><p>如果 outer 不为空, 返回 outer,否则返回一个新的 Vector 对象, 建议传入 outer 来减少 new 对象且 outer 不能为 null/undefined</p><h4 id="parameters-5" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-5" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>outer?</code></td><td style="text-align:left;"><a href="./Type.Type.Vector.html"><code>Vector</code></a></td><td style="text-align:left;">usage:接收结果的 Vector 对象 default:null</td></tr></tbody></table><h4 id="returns-10" tabindex="-1">Returns <a class="header-anchor" href="#returns-10" aria-hidden="true">#</a></h4><p><a href="./Type.Type.Vector.html"><code>Vector</code></a></p><p>此四元数的坐标系 Y 轴向量</p><h4 id="defined-in-17" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-17" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2388</p><hr><h3 id="getaxisz" tabindex="-1">getAxisZ <a class="header-anchor" href="#getaxisz" aria-hidden="true">#</a></h3><p>▸ <strong>getAxisZ</strong>(<code>outer?</code>): <a href="./Type.Type.Vector.html"><code>Vector</code></a></p><p><strong><code>Description</code></strong></p><p>返回定义此四元数的坐标系 Z 轴向量</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><p><strong><code>Precautions</code></strong></p><p>如果 outer 不为空, 返回 outer,否则返回一个新的 Vector 对象, 建议传入 outer 来减少 new 对象且 outer 不能为 null/undefined</p><h4 id="parameters-6" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-6" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>outer?</code></td><td style="text-align:left;"><a href="./Type.Type.Vector.html"><code>Vector</code></a></td><td style="text-align:left;">usage:接收结果的 Vector 对象 default:null</td></tr></tbody></table><h4 id="returns-11" tabindex="-1">Returns <a class="header-anchor" href="#returns-11" aria-hidden="true">#</a></h4><p><a href="./Type.Type.Vector.html"><code>Vector</code></a></p><p>此四元数的坐标系 Z 轴向量</p><h4 id="defined-in-18" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-18" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2396</p><hr><h3 id="geteuler" tabindex="-1">getEuler <a class="header-anchor" href="#geteuler" aria-hidden="true">#</a></h3><p>▸ <strong>getEuler</strong>(<code>outerZ?</code>, <code>outer?</code>): <a href="./Type.Type.Vector.html"><code>Vector</code></a></p><p><strong><code>Description</code></strong></p><p>根据四元数计算欧拉角，返回角度 x, y 在 [-180, 180] 区间内, z 默认在 [-90, 90] 区间内，旋转顺序为 YZX</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><p><strong><code>Precautions</code></strong></p><p>如果 outer 不为空, 返回 outer,否则返回一个新的 Vector 对象, 建议传入 outer 来减少 new 对象且 outer 不能为 null/undefined</p><h4 id="parameters-7" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-7" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>outerZ?</code></td><td style="text-align:left;"><code>boolean</code></td><td style="text-align:left;">usage:将 z 值范围更改为[-180，-90]U[90，180] default:false</td></tr><tr><td style="text-align:left;"><code>outer?</code></td><td style="text-align:left;"><a href="./Type.Type.Vector.html"><code>Vector</code></a></td><td style="text-align:left;">usage:接收结果的 Vector 对象 default:null</td></tr></tbody></table><h4 id="returns-12" tabindex="-1">Returns <a class="header-anchor" href="#returns-12" aria-hidden="true">#</a></h4><p><a href="./Type.Type.Vector.html"><code>Vector</code></a></p><p>欧拉角</p><h4 id="defined-in-19" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-19" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2405</p><hr><h3 id="geteulerangles" tabindex="-1">getEulerAngles <a class="header-anchor" href="#geteulerangles" aria-hidden="true">#</a></h3><p>▸ <strong>getEulerAngles</strong>(): <a href="./Type.Type.Vector.html"><code>Vector</code></a></p><p><strong><code>Description</code></strong></p><p>返回当前四元数转化的欧拉角（x-y-z）。</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><h4 id="returns-13" tabindex="-1">Returns <a class="header-anchor" href="#returns-13" aria-hidden="true">#</a></h4><p><a href="./Type.Type.Vector.html"><code>Vector</code></a></p><p>欧拉角</p><h4 id="defined-in-20" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-20" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2332</p><hr><h3 id="normalize" tabindex="-1">normalize <a class="header-anchor" href="#normalize" aria-hidden="true">#</a></h3><p>▸ <strong>normalize</strong>(): <code>void</code></p><p><strong><code>Description</code></strong></p><p>将当前四元数归一化</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><h4 id="returns-14" tabindex="-1">Returns <a class="header-anchor" href="#returns-14" aria-hidden="true">#</a></h4><p><code>void</code></p><h4 id="defined-in-21" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-21" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2372</p><hr><h3 id="set" tabindex="-1">set <a class="header-anchor" href="#set" aria-hidden="true">#</a></h3><p>▸ <strong>set</strong>(<code>other</code>): <a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p><strong><code>Description</code></strong></p><p>设置当前四元数使其与指定四元数相等。</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><h4 id="parameters-8" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-8" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>other</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:四元数数据</td></tr></tbody></table><h4 id="returns-15" tabindex="-1">Returns <a class="header-anchor" href="#returns-15" aria-hidden="true">#</a></h4><p><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p><code>this</code></p><h4 id="defined-in-22" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-22" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2310</p><p>▸ <strong>set</strong>(<code>x?</code>, <code>y?</code>, <code>z?</code>, <code>w?</code>): <a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p><strong><code>Description</code></strong></p><p>设置当前四元数指定元素值。</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><h4 id="parameters-9" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-9" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>x?</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">usage:四元数的 x 分量 default:0</td></tr><tr><td style="text-align:left;"><code>y?</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">usage:四元数的 y 分量 default:0</td></tr><tr><td style="text-align:left;"><code>z?</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">usage:四元数的 z 分量 default:0</td></tr><tr><td style="text-align:left;"><code>w?</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">usage:四元数的 w 分量 default:0</td></tr></tbody></table><h4 id="returns-16" tabindex="-1">Returns <a class="header-anchor" href="#returns-16" aria-hidden="true">#</a></h4><p><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p><code>this</code></p><h4 id="defined-in-23" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-23" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2320</p><hr><h3 id="seteulerangles" tabindex="-1">setEulerAngles <a class="header-anchor" href="#seteulerangles" aria-hidden="true">#</a></h3><p>▸ <strong>setEulerAngles</strong>(<code>euler</code>): <code>void</code></p><p><strong><code>Description</code></strong></p><p>设置欧拉角</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><h4 id="parameters-10" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-10" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>euler</code></td><td style="text-align:left;"><a href="./Type.Type.Vector.html"><code>Vector</code></a></td><td style="text-align:left;">usage:传入的欧拉角</td></tr></tbody></table><h4 id="returns-17" tabindex="-1">Returns <a class="header-anchor" href="#returns-17" aria-hidden="true">#</a></h4><p><code>void</code></p><h4 id="defined-in-24" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-24" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2326</p><hr><h3 id="strictequals" tabindex="-1">strictEquals <a class="header-anchor" href="#strictequals" aria-hidden="true">#</a></h3><p>▸ <strong>strictEquals</strong>(<code>other</code>): <code>boolean</code></p><p><strong><code>Description</code></strong></p><p>判断当前四元数是否与指定四元数相等。</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><h4 id="parameters-11" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-11" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>other</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:比对的目标四元数</td></tr></tbody></table><h4 id="returns-18" tabindex="-1">Returns <a class="header-anchor" href="#returns-18" aria-hidden="true">#</a></h4><p><code>boolean</code></p><p>比对后的结果</p><h4 id="defined-in-25" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-25" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2347</p><hr><h3 id="torotation" tabindex="-1">toRotation <a class="header-anchor" href="#torotation" aria-hidden="true">#</a></h3><p>▸ <strong>toRotation</strong>(): <a href="./Type.Type.Rotation.html"><code>Rotation</code></a></p><p><strong><code>Description</code></strong></p><p>获取一个当前四元数的旋转数据</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><h4 id="returns-19" tabindex="-1">Returns <a class="header-anchor" href="#returns-19" aria-hidden="true">#</a></h4><p><a href="./Type.Type.Rotation.html"><code>Rotation</code></a></p><p>旋转数据</p><h4 id="defined-in-26" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-26" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2417</p><hr><h3 id="tostring" tabindex="-1">toString <a class="header-anchor" href="#tostring" aria-hidden="true">#</a></h3><p>▸ <strong>toString</strong>(): <code>string</code></p><p><strong><code>Description</code></strong></p><p>输出为字符串</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><h4 id="returns-20" tabindex="-1">Returns <a class="header-anchor" href="#returns-20" aria-hidden="true">#</a></h4><p><code>string</code></p><p>四元数值字符串</p><h4 id="defined-in-27" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-27" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2423</p><hr><h3 id="calculatew" tabindex="-1">calculateW <a class="header-anchor" href="#calculatew" aria-hidden="true">#</a></h3><p>▸ <code>Static</code> <strong>calculateW</strong>(<code>a</code>, <code>outer?</code>): <a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p><strong><code>Description</code></strong></p><p>根据 xyz 分量计算 w 分量，默认已归一化</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><p><strong><code>Precautions</code></strong></p><p>如果 outer 不为空, 返回 outer,否则返回一个新的 Quaternion 对象, 建议传入 outer 来减少 new 对象且 outer 不能为 null/undefined</p><h4 id="parameters-12" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-12" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>a</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:目标四元数</td></tr><tr><td style="text-align:left;"><code>outer?</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:接收结果的 Quaternion 对象 default:null</td></tr></tbody></table><h4 id="returns-21" tabindex="-1">Returns <a class="header-anchor" href="#returns-21" aria-hidden="true">#</a></h4><p><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p>返回一个四元数</p><h4 id="defined-in-28" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-28" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2166</p><hr><h3 id="conjugate" tabindex="-1">conjugate <a class="header-anchor" href="#conjugate" aria-hidden="true">#</a></h3><p>▸ <code>Static</code> <strong>conjugate</strong>(<code>a</code>, <code>outer?</code>): <a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p><strong><code>Description</code></strong></p><p>求共轭四元数，对单位四元数与求逆等价，但更高效</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><p><strong><code>Precautions</code></strong></p><p>如果 outer 不为空, 返回 outer,否则返回一个新的 Quaternion 对象, 建议传入 outer 来减少 new 对象且 outer 不能为 null/undefined</p><h4 id="parameters-13" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-13" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>a</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:四元数 a</td></tr><tr><td style="text-align:left;"><code>outer?</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:接收结果的 Quaternion 对象 default:null</td></tr></tbody></table><h4 id="returns-22" tabindex="-1">Returns <a class="header-anchor" href="#returns-22" aria-hidden="true">#</a></h4><p><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p>返回一个四元数</p><h4 id="defined-in-29" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-29" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2244</p><hr><h3 id="dot" tabindex="-1">dot <a class="header-anchor" href="#dot" aria-hidden="true">#</a></h3><p>▸ <code>Static</code> <strong>dot</strong>(<code>a</code>, <code>b</code>): <code>number</code></p><p><strong><code>Description</code></strong></p><p>四元数点积（数量积）</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><h4 id="parameters-14" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-14" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>a</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:四元数 a</td></tr><tr><td style="text-align:left;"><code>b</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:四元数 b</td></tr></tbody></table><h4 id="returns-23" tabindex="-1">Returns <a class="header-anchor" href="#returns-23" aria-hidden="true">#</a></h4><p><code>number</code></p><p>返回一个结果数</p><h4 id="defined-in-30" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-30" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2174</p><hr><h3 id="equals-1" tabindex="-1">equals <a class="header-anchor" href="#equals-1" aria-hidden="true">#</a></h3><p>▸ <code>Static</code> <strong>equals</strong>(<code>a</code>, <code>b</code>, <code>epsilon?</code>): <code>boolean</code></p><p><strong><code>Description</code></strong></p><p>排除浮点数误差的四元数近似等价判断</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><h4 id="parameters-15" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-15" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>a</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:四元数 a</td></tr><tr><td style="text-align:left;"><code>b</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:四元数 b</td></tr><tr><td style="text-align:left;"><code>epsilon?</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">usage:最小误差数 default:MathDefine.EPSILON</td></tr></tbody></table><h4 id="returns-24" tabindex="-1">Returns <a class="header-anchor" href="#returns-24" aria-hidden="true">#</a></h4><p><code>boolean</code></p><p>返回是否相等的结果</p><h4 id="defined-in-31" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-31" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2270</p><hr><h3 id="fromanglez" tabindex="-1">fromAngleZ <a class="header-anchor" href="#fromanglez" aria-hidden="true">#</a></h3><p>▸ <code>Static</code> <strong>fromAngleZ</strong>(<code>z</code>, <code>outer?</code>): <a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p><strong><code>Description</code></strong></p><p>根据 2D 角度（0, 0, z）计算四元数</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><p><strong><code>Precautions</code></strong></p><p>如果 outer 不为空, 返回 outer,否则返回一个新的 Quaternion 对象, 建议传入 outer 来减少 new 对象且 outer 不能为 null/undefined</p><h4 id="parameters-16" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-16" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>z</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">usage:绕 z 旋转的角度值</td></tr><tr><td style="text-align:left;"><code>outer?</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:接收结果的 Quaternion 对象 default:null</td></tr></tbody></table><h4 id="returns-25" tabindex="-1">Returns <a class="header-anchor" href="#returns-25" aria-hidden="true">#</a></h4><p><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p>返回一个四元数</p><h4 id="defined-in-32" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-32" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2045</p><hr><h3 id="fromaxes" tabindex="-1">fromAxes <a class="header-anchor" href="#fromaxes" aria-hidden="true">#</a></h3><p>▸ <code>Static</code> <strong>fromAxes</strong>(<code>xAxis</code>, <code>yAxis</code>, <code>zAxis</code>, <code>outer?</code>): <a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p><strong><code>Description</code></strong></p><p>根据坐标轴朝向计算四元数，默认三向量都已归一化且相互垂直</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><p><strong><code>Precautions</code></strong></p><p>如果 outer 不为空, 返回 outer,否则返回一个新的 Quaternion 对象, 建议传入 outer 来减少 new 对象且 outer 不能为 null/undefined</p><h4 id="parameters-17" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-17" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>xAxis</code></td><td style="text-align:left;"><a href="./Type.Type.Vector.html"><code>Vector</code></a></td><td style="text-align:left;">usage:x 轴的向量值</td></tr><tr><td style="text-align:left;"><code>yAxis</code></td><td style="text-align:left;"><a href="./Type.Type.Vector.html"><code>Vector</code></a></td><td style="text-align:left;">usage:y 轴的向量值</td></tr><tr><td style="text-align:left;"><code>zAxis</code></td><td style="text-align:left;"><a href="./Type.Type.Vector.html"><code>Vector</code></a></td><td style="text-align:left;">usage:z 轴的向量值</td></tr><tr><td style="text-align:left;"><code>outer?</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:接收结果的 Quaternion 对象 default:null</td></tr></tbody></table><h4 id="returns-26" tabindex="-1">Returns <a class="header-anchor" href="#returns-26" aria-hidden="true">#</a></h4><p><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p>返回一个四元数</p><h4 id="defined-in-33" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-33" aria-hidden="true">#</a></h4><p>Type/index.d.ts:1985</p><hr><h3 id="fromaxisangle" tabindex="-1">fromAxisAngle <a class="header-anchor" href="#fromaxisangle" aria-hidden="true">#</a></h3><p>▸ <code>Static</code> <strong>fromAxisAngle</strong>(<code>axis</code>, <code>rad</code>, <code>outer?</code>): <a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p><strong><code>Description</code></strong></p><p>根据旋转轴和旋转弧度计算四元数</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><p><strong><code>Precautions</code></strong></p><p>如果 outer 不为空, 返回 outer,否则返回一个新的 Quaternion 对象, 建议传入 outer 来减少 new 对象且 outer 不能为 null/undefined</p><h4 id="parameters-18" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-18" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>axis</code></td><td style="text-align:left;"><a href="./Type.Type.Vector.html"><code>Vector</code></a></td><td style="text-align:left;">usage:旋转轴</td></tr><tr><td style="text-align:left;"><code>rad</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">usage:弧度值</td></tr><tr><td style="text-align:left;"><code>outer?</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:接收结果的 Quaternion 对象 default:null</td></tr></tbody></table><h4 id="returns-27" tabindex="-1">Returns <a class="header-anchor" href="#returns-27" aria-hidden="true">#</a></h4><p><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p>返回一个四元数</p><h4 id="defined-in-34" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-34" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2014</p><hr><h3 id="frommatrix3x3" tabindex="-1">fromMatrix3x3 <a class="header-anchor" href="#frommatrix3x3" aria-hidden="true">#</a></h3><p>▸ <code>Static</code> <strong>fromMatrix3x3</strong>(<code>m</code>, <code>outer?</code>): <a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p><strong><code>Description</code></strong></p><p>根据三维矩阵信息计算四元数，默认输入矩阵不含有缩放信息</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><p><strong><code>Precautions</code></strong></p><p>如果 outer 不为空, 返回 outer,否则返回一个新的 Quaternion 对象, 建议传入 outer 来减少 new 对象且 outer 不能为 null/undefined</p><h4 id="parameters-19" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-19" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>m</code></td><td style="text-align:left;"><a href="./Type.Type.Matrix3x3.html"><code>Matrix3x3</code></a></td><td style="text-align:left;">usage:三维矩阵</td></tr><tr><td style="text-align:left;"><code>outer?</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:接收结果的 Quaternion 对象 default:null</td></tr></tbody></table><h4 id="returns-28" tabindex="-1">Returns <a class="header-anchor" href="#returns-28" aria-hidden="true">#</a></h4><p><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p>返回一个四元数</p><h4 id="defined-in-35" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-35" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2027</p><hr><h3 id="fromrotation-1" tabindex="-1">fromRotation <a class="header-anchor" href="#fromrotation-1" aria-hidden="true">#</a></h3><p>▸ <code>Static</code> <strong>fromRotation</strong>(<code>v</code>, <code>outer?</code>): <a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p><strong><code>Description</code></strong></p><p>读取旋转角数据创建或者写入一个四元数</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><p><strong><code>Precautions</code></strong></p><p>如果 outer 不为空, 返回 outer,否则返回一个新的 Quaternion 对象, 建议传入 outer 来减少 new 对象且 outer 不能为 null/undefined</p><h4 id="parameters-20" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-20" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>v</code></td><td style="text-align:left;"><a href="./Type.Type.Rotation.html"><code>Rotation</code></a></td><td style="text-align:left;">usage:读取的字符串数据</td></tr><tr><td style="text-align:left;"><code>outer?</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:接收结果的 Quaternion 对象 default:null</td></tr></tbody></table><h4 id="returns-29" tabindex="-1">Returns <a class="header-anchor" href="#returns-29" aria-hidden="true">#</a></h4><p><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p>返回一个四元数</p><h4 id="defined-in-36" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-36" aria-hidden="true">#</a></h4><p>Type/index.d.ts:1974</p><hr><h3 id="fromviewup" tabindex="-1">fromViewUp <a class="header-anchor" href="#fromviewup" aria-hidden="true">#</a></h3><p>▸ <code>Static</code> <strong>fromViewUp</strong>(<code>view</code>, <code>up?</code>, <code>outer?</code>): <a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p><strong><code>Description</code></strong></p><p>根据视口的前方向和上方向计算四元数</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><p><strong><code>Precautions</code></strong></p><p>如果 outer 不为空, 返回 outer,否则返回一个新的 Quaternion 对象, 建议传入 outer 来减少 new 对象且 outer 不能为 null/undefined</p><h4 id="parameters-21" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-21" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>view</code></td><td style="text-align:left;"><a href="./Type.Type.Vector.html"><code>Vector</code></a></td><td style="text-align:left;">usage:视口的前向量</td></tr><tr><td style="text-align:left;"><code>up?</code></td><td style="text-align:left;"><a href="./Type.Type.Vector.html"><code>Vector</code></a></td><td style="text-align:left;">usage:上方向量 default:null</td></tr><tr><td style="text-align:left;"><code>outer?</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:接收结果的 Quaternion 对象 default:null</td></tr></tbody></table><h4 id="returns-30" tabindex="-1">Returns <a class="header-anchor" href="#returns-30" aria-hidden="true">#</a></h4><p><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p>返回一个四元数</p><h4 id="defined-in-37" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-37" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2000</p><hr><h3 id="getaxis" tabindex="-1">getAxis <a class="header-anchor" href="#getaxis" aria-hidden="true">#</a></h3><p>▸ <code>Static</code> <strong>getAxis</strong>(<code>q</code>, <code>outer?</code>): <a href="./Type.Type.Vector.html"><code>Vector</code></a></p><p><strong><code>Description</code></strong></p><p>获取四元数的旋转轴</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><p><strong><code>Precautions</code></strong></p><p>如果 outer 不为空, 返回 outer,否则返回一个新的 Vector 对象, 建议传入 outer 来减少 new 对象且 outer 不能为 null/undefined</p><h4 id="parameters-22" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-22" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>q</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:目标四元数</td></tr><tr><td style="text-align:left;"><code>outer?</code></td><td style="text-align:left;"><a href="./Type.Type.Vector.html"><code>Vector</code></a></td><td style="text-align:left;">usage:被写入的 Vector 对象 default:null</td></tr></tbody></table><h4 id="returns-31" tabindex="-1">Returns <a class="header-anchor" href="#returns-31" aria-hidden="true">#</a></h4><p><a href="./Type.Type.Vector.html"><code>Vector</code></a></p><p>返回一个三维向量</p><h4 id="defined-in-38" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-38" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2064</p><hr><h3 id="getaxisangle" tabindex="-1">getAxisAngle <a class="header-anchor" href="#getaxisangle" aria-hidden="true">#</a></h3><p>▸ <code>Static</code> <strong>getAxisAngle</strong>(<code>q</code>): <code>number</code></p><p><strong><code>Description</code></strong></p><p>获取四元数的旋转弧度</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><h4 id="parameters-23" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-23" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>q</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:目标四元数</td></tr></tbody></table><h4 id="returns-32" tabindex="-1">Returns <a class="header-anchor" href="#returns-32" aria-hidden="true">#</a></h4><p><code>number</code></p><p>返回一个弧度值</p><h4 id="defined-in-39" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-39" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2071</p><hr><h3 id="invert" tabindex="-1">invert <a class="header-anchor" href="#invert" aria-hidden="true">#</a></h3><p>▸ <code>Static</code> <strong>invert</strong>(<code>a</code>, <code>outer?</code>): <a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p><strong><code>Description</code></strong></p><p>四元数求逆</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><p><strong><code>Precautions</code></strong></p><p>如果 outer 不为空, 返回 outer,否则返回一个新的 Quaternion 对象, 建议传入 outer 来减少 new 对象且 outer 不能为 null/undefined</p><h4 id="parameters-24" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-24" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>a</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:四元数 a</td></tr><tr><td style="text-align:left;"><code>outer?</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:接收结果的 Quaternion 对象 default:null</td></tr></tbody></table><h4 id="returns-33" tabindex="-1">Returns <a class="header-anchor" href="#returns-33" aria-hidden="true">#</a></h4><p><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p>返回一个四元数</p><h4 id="defined-in-40" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-40" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2235</p><hr><h3 id="lerp" tabindex="-1">lerp <a class="header-anchor" href="#lerp" aria-hidden="true">#</a></h3><p>▸ <code>Static</code> <strong>lerp</strong>(<code>a</code>, <code>b</code>, <code>t</code>, <code>outer?</code>): <a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p><strong><code>Description</code></strong></p><p>逐元素线性插值： A + t * (B - A)</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><p><strong><code>Precautions</code></strong></p><p>如果 outer 不为空, 返回 outer,否则返回一个新的 Quaternion 对象, 建议传入 outer 来减少 new 对象且 outer 不能为 null/undefined</p><h4 id="parameters-25" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-25" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>a</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:四元数 a</td></tr><tr><td style="text-align:left;"><code>b</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:四元数 b</td></tr><tr><td style="text-align:left;"><code>t</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">usage:插值（通常为 0-1 之间)</td></tr><tr><td style="text-align:left;"><code>outer?</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:接收结果的 Quaternion 对象 default:null</td></tr></tbody></table><h4 id="returns-34" tabindex="-1">Returns <a class="header-anchor" href="#returns-34" aria-hidden="true">#</a></h4><p><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p>返回一个四元数</p><h4 id="defined-in-41" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-41" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2185</p><hr><h3 id="multiply" tabindex="-1">multiply <a class="header-anchor" href="#multiply" aria-hidden="true">#</a></h3><p>▸ <code>Static</code> <strong>multiply</strong>(<code>a</code>, <code>b</code>, <code>outer?</code>): <a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p><strong><code>Description</code></strong></p><p>四元数乘法</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><p><strong><code>Precautions</code></strong></p><p>如果 outer 不为空, 返回 outer,否则返回一个新的 Quaternion 对象, 建议传入 outer 来减少 new 对象且 outer 不能为 null/undefined</p><h4 id="parameters-26" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-26" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>a</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:四元数 a</td></tr><tr><td style="text-align:left;"><code>b</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:四元数 b</td></tr><tr><td style="text-align:left;"><code>outer?</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:接收结果的 Quaternion 对象 default:null</td></tr></tbody></table><h4 id="returns-35" tabindex="-1">Returns <a class="header-anchor" href="#returns-35" aria-hidden="true">#</a></h4><p><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p>返回一个四元数</p><h4 id="defined-in-42" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-42" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2091</p><hr><h3 id="multiplyvector" tabindex="-1">multiplyVector <a class="header-anchor" href="#multiplyvector" aria-hidden="true">#</a></h3><p>▸ <code>Static</code> <strong>multiplyVector</strong>(<code>a</code>, <code>q</code>, <code>outer?</code>): <a href="./Type.Type.Vector.html"><code>Vector</code></a></p><p><strong><code>Description</code></strong></p><p>四元数乘以一个三维向量(通常用于向量通过四元数旋转)</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><p><strong><code>Precautions</code></strong></p><p>如果 outer 不为空, 返回 outer,否则返回一个新的 Vector 对象, 建议传入 outer 来减少 new 对象且 outer 不能为 null/undefined</p><h4 id="parameters-27" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-27" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>a</code></td><td style="text-align:left;"><a href="./Type.Type.Vector.html"><code>Vector</code></a></td><td style="text-align:left;">usage:目标向量</td></tr><tr><td style="text-align:left;"><code>q</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:四元数</td></tr><tr><td style="text-align:left;"><code>outer?</code></td><td style="text-align:left;"><a href="./Type.Type.Vector.html"><code>Vector</code></a></td><td style="text-align:left;">usage:被写入的 Vector 对象 default:null</td></tr></tbody></table><h4 id="returns-36" tabindex="-1">Returns <a class="header-anchor" href="#returns-36" aria-hidden="true">#</a></h4><p><a href="./Type.Type.Vector.html"><code>Vector</code></a></p><p>返回一个旋转后的三维向量</p><h4 id="defined-in-43" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-43" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2081</p><hr><h3 id="normalize-1" tabindex="-1">normalize <a class="header-anchor" href="#normalize-1" aria-hidden="true">#</a></h3><p>▸ <code>Static</code> <strong>normalize</strong>(<code>a</code>, <code>outer?</code>): <a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p><strong><code>Description</code></strong></p><p>归一化四元数</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><p><strong><code>Precautions</code></strong></p><p>如果 outer 不为空, 返回 outer,否则返回一个新的 Quaternion 对象, 建议传入 outer 来减少 new 对象且 outer 不能为 null/undefined</p><h4 id="parameters-28" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-28" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>a</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:四元数 a</td></tr><tr><td style="text-align:left;"><code>outer?</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:接收结果的 Quaternion 对象 default:null</td></tr></tbody></table><h4 id="returns-37" tabindex="-1">Returns <a class="header-anchor" href="#returns-37" aria-hidden="true">#</a></h4><p><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p>返回一个四元数</p><h4 id="defined-in-44" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-44" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2253</p><hr><h3 id="rotatearound" tabindex="-1">rotateAround <a class="header-anchor" href="#rotatearound" aria-hidden="true">#</a></h3><p>▸ <code>Static</code> <strong>rotateAround</strong>(<code>rot</code>, <code>axis</code>, <code>rad</code>, <code>outer?</code>): <a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p><strong><code>Description</code></strong></p><p>绕世界空间下指定轴旋转四元数</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><p><strong><code>Precautions</code></strong></p><p>如果 outer 不为空, 返回 outer,否则返回一个新的 Quaternion 对象, 建议传入 outer 来减少 new 对象且 outer 不能为 null/undefined</p><h4 id="parameters-29" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-29" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>rot</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:被旋转的四元数</td></tr><tr><td style="text-align:left;"><code>axis</code></td><td style="text-align:left;"><a href="./Type.Type.Vector.html"><code>Vector</code></a></td><td style="text-align:left;">usage:代表旋转轴的三维向量</td></tr><tr><td style="text-align:left;"><code>rad</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">usage:弧度值</td></tr><tr><td style="text-align:left;"><code>outer?</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:接收结果的 Quaternion 对象 default:null</td></tr></tbody></table><h4 id="returns-38" tabindex="-1">Returns <a class="header-anchor" href="#returns-38" aria-hidden="true">#</a></h4><p><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p>返回一个四元数</p><h4 id="defined-in-45" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-45" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2136</p><hr><h3 id="rotatearoundlocal" tabindex="-1">rotateAroundLocal <a class="header-anchor" href="#rotatearoundlocal" aria-hidden="true">#</a></h3><p>▸ <code>Static</code> <strong>rotateAroundLocal</strong>(<code>rot</code>, <code>axis</code>, <code>rad</code>, <code>outer?</code>): <a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p><strong><code>Description</code></strong></p><p>绕本地空间下指定轴旋转四元数</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><p><strong><code>Precautions</code></strong></p><p>如果 outer 不为空, 返回 outer,否则返回一个新的 Quaternion 对象, 建议传入 outer 来减少 new 对象且 outer 不能为 null/undefined</p><h4 id="parameters-30" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-30" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>rot</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:需要变换的四元数</td></tr><tr><td style="text-align:left;"><code>axis</code></td><td style="text-align:left;"><a href="./Type.Type.Vector.html"><code>Vector</code></a></td><td style="text-align:left;">usage:代表旋转轴的三维向量</td></tr><tr><td style="text-align:left;"><code>rad</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">usage:弧度值</td></tr><tr><td style="text-align:left;"><code>outer?</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:接收结果的 Quaternion 对象 default:null</td></tr></tbody></table><h4 id="returns-39" tabindex="-1">Returns <a class="header-anchor" href="#returns-39" aria-hidden="true">#</a></h4><p><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p>返回一个四元数</p><h4 id="defined-in-46" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-46" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2152</p><hr><h3 id="rotatex" tabindex="-1">rotateX <a class="header-anchor" href="#rotatex" aria-hidden="true">#</a></h3><p>▸ <code>Static</code> <strong>rotateX</strong>(<code>a</code>, <code>rad</code>, <code>outer?</code>): <a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p><strong><code>Description</code></strong></p><p>绕 X 轴旋转指定四元数</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><p><strong><code>Precautions</code></strong></p><p>如果 outer 不为空, 返回 outer,否则返回一个新的 Quaternion 对象, 建议传入 outer 来减少 new 对象且 outer 不能为 null/undefined</p><h4 id="parameters-31" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-31" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>a</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:四元数</td></tr><tr><td style="text-align:left;"><code>rad</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">usage:弧度值</td></tr><tr><td style="text-align:left;"><code>outer?</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:接收结果的 Quaternion 对象 default:null</td></tr></tbody></table><h4 id="returns-40" tabindex="-1">Returns <a class="header-anchor" href="#returns-40" aria-hidden="true">#</a></h4><p><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p>返回一个四元数</p><h4 id="defined-in-47" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-47" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2105</p><hr><h3 id="rotatey" tabindex="-1">rotateY <a class="header-anchor" href="#rotatey" aria-hidden="true">#</a></h3><p>▸ <code>Static</code> <strong>rotateY</strong>(<code>a</code>, <code>rad</code>, <code>outer?</code>): <a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p><strong><code>Description</code></strong></p><p>绕 Y 轴旋转指定四元数</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><p><strong><code>Precautions</code></strong></p><p>如果 outer 不为空, 返回 outer,否则返回一个新的 Quaternion 对象, 建议传入 outer 来减少 new 对象且 outer 不能为 null/undefined</p><h4 id="parameters-32" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-32" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>a</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:四元数</td></tr><tr><td style="text-align:left;"><code>rad</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">usage:弧度值</td></tr><tr><td style="text-align:left;"><code>outer?</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:接收结果的 Quaternion 对象 default:null</td></tr></tbody></table><h4 id="returns-41" tabindex="-1">Returns <a class="header-anchor" href="#returns-41" aria-hidden="true">#</a></h4><p><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p>返回一个四元数</p><h4 id="defined-in-48" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-48" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2115</p><hr><h3 id="rotatez" tabindex="-1">rotateZ <a class="header-anchor" href="#rotatez" aria-hidden="true">#</a></h3><p>▸ <code>Static</code> <strong>rotateZ</strong>(<code>a</code>, <code>rad</code>, <code>outer?</code>): <a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p><strong><code>Description</code></strong></p><p>绕 Z 轴旋转指定四元数</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><p><strong><code>Precautions</code></strong></p><p>如果 outer 不为空, 返回 outer,否则返回一个新的 Quaternion 对象, 建议传入 outer 来减少 new 对象且 outer 不能为 null/undefined</p><h4 id="parameters-33" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-33" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>a</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:四元数</td></tr><tr><td style="text-align:left;"><code>rad</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">usage:弧度值</td></tr><tr><td style="text-align:left;"><code>outer?</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:接收结果的 Quaternion 对象 default:null</td></tr></tbody></table><h4 id="returns-42" tabindex="-1">Returns <a class="header-anchor" href="#returns-42" aria-hidden="true">#</a></h4><p><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p>返回一个四元数</p><h4 id="defined-in-49" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-49" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2125</p><hr><h3 id="rotationto" tabindex="-1">rotationTo <a class="header-anchor" href="#rotationto" aria-hidden="true">#</a></h3><p>▸ <code>Static</code> <strong>rotationTo</strong>(<code>a</code>, <code>b</code>, <code>outer?</code>): <a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p><strong><code>Description</code></strong></p><p>设置四元数为两向量 a 和 b 间的最短路径旋转，默认两向量都已归一化</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><p><strong><code>Precautions</code></strong></p><p>如果 outer 不为空, 返回 outer,否则返回一个新的 Quaternion 对象, 建议传入 outer 来减少 new 对象且 outer 不能为 null/undefined</p><h4 id="parameters-34" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-34" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>a</code></td><td style="text-align:left;"><a href="./Type.Type.Vector.html"><code>Vector</code></a></td><td style="text-align:left;">usage:向量 a</td></tr><tr><td style="text-align:left;"><code>b</code></td><td style="text-align:left;"><a href="./Type.Type.Vector.html"><code>Vector</code></a></td><td style="text-align:left;">usage:向量 b</td></tr><tr><td style="text-align:left;"><code>outer?</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:接收结果的 Quaternion 对象 default:null</td></tr></tbody></table><h4 id="returns-43" tabindex="-1">Returns <a class="header-anchor" href="#returns-43" aria-hidden="true">#</a></h4><p><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p>返回一个四元数</p><h4 id="defined-in-50" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-50" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2055</p><hr><h3 id="slerp" tabindex="-1">slerp <a class="header-anchor" href="#slerp" aria-hidden="true">#</a></h3><p>▸ <code>Static</code> <strong>slerp</strong>(<code>a</code>, <code>b</code>, <code>t</code>, <code>outer?</code>): <a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p><strong><code>Description</code></strong></p><p>四元数球面插值</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><p><strong><code>Precautions</code></strong></p><p>如果 outer 不为空, 返回 outer,否则返回一个新的 Quaternion 对象, 建议传入 outer 来减少 new 对象且 outer 不能为 null/undefined</p><h4 id="parameters-35" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-35" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>a</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:四元数 a</td></tr><tr><td style="text-align:left;"><code>b</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:四元数 b</td></tr><tr><td style="text-align:left;"><code>t</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">usage:插值（通常为 0-1 之间)</td></tr><tr><td style="text-align:left;"><code>outer?</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:接收结果的 Quaternion 对象 default:null</td></tr></tbody></table><h4 id="returns-44" tabindex="-1">Returns <a class="header-anchor" href="#returns-44" aria-hidden="true">#</a></h4><p><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p>返回一个四元数</p><h4 id="defined-in-51" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-51" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2201</p><hr><h3 id="sqlerp" tabindex="-1">sqlerp <a class="header-anchor" href="#sqlerp" aria-hidden="true">#</a></h3><p>▸ <code>Static</code> <strong>sqlerp</strong>(<code>a</code>, <code>b</code>, <code>c</code>, <code>d</code>, <code>t</code>, <code>outer?</code>): <a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p><strong><code>Description</code></strong></p><p>带两个控制点的四元数球面插值</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><p><strong><code>Precautions</code></strong></p><p>如果 outer 不为空, 返回 outer,否则返回一个新的 Quaternion 对象, 建议传入 outer 来减少 new 对象且 outer 不能为 null/undefined</p><h4 id="parameters-36" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-36" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>a</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:四元数 a</td></tr><tr><td style="text-align:left;"><code>b</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:四元数 b</td></tr><tr><td style="text-align:left;"><code>c</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:四元数 c</td></tr><tr><td style="text-align:left;"><code>d</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:四元数 d</td></tr><tr><td style="text-align:left;"><code>t</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">usage:插值（通常为 0-1 之间)</td></tr><tr><td style="text-align:left;"><code>outer?</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:接收结果的 Quaternion 对象 default:null</td></tr></tbody></table><h4 id="returns-45" tabindex="-1">Returns <a class="header-anchor" href="#returns-45" aria-hidden="true">#</a></h4><p><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></p><p>返回一个四元数</p><h4 id="defined-in-52" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-52" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2219</p><hr><h3 id="strictequals-1" tabindex="-1">strictEquals <a class="header-anchor" href="#strictequals-1" aria-hidden="true">#</a></h3><p>▸ <code>Static</code> <strong>strictEquals</strong>(<code>a</code>, <code>b</code>): <code>boolean</code></p><p><strong><code>Description</code></strong></p><p>四元数等价判断</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><h4 id="parameters-37" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-37" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>a</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:四元数 a</td></tr><tr><td style="text-align:left;"><code>b</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:四元数 b</td></tr></tbody></table><h4 id="returns-46" tabindex="-1">Returns <a class="header-anchor" href="#returns-46" aria-hidden="true">#</a></h4><p><code>boolean</code></p><p>返回是否相等的结果</p><h4 id="defined-in-53" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-53" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2261</p><hr><h3 id="tomatrix3x3" tabindex="-1">toMatrix3x3 <a class="header-anchor" href="#tomatrix3x3" aria-hidden="true">#</a></h3><p>▸ <code>Static</code> <strong>toMatrix3x3</strong>(<code>q</code>, <code>outer?</code>): <a href="./Type.Type.Matrix3x3.html"><code>Matrix3x3</code></a></p><p><strong><code>Description</code></strong></p><p>根据四元数旋转信息计算矩阵</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><p><strong><code>Precautions</code></strong></p><p>如果 outer 不为空, 返回 outer,否则返回一个新的 Matrix3x3 对象, 建议传入 outer 来减少 new 对象且 outer 不能为 null/undefined</p><h4 id="parameters-38" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-38" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>q</code></td><td style="text-align:left;"><a href="./Type.Type.Quaternion.html"><code>Quaternion</code></a></td><td style="text-align:left;">usage:四元数信息</td></tr><tr><td style="text-align:left;"><code>outer?</code></td><td style="text-align:left;"><a href="./Type.Type.Matrix3x3.html"><code>Matrix3x3</code></a></td><td style="text-align:left;">usage:被写入的 Matrix3x3 对象 default:null</td></tr></tbody></table><h4 id="returns-47" tabindex="-1">Returns <a class="header-anchor" href="#returns-47" aria-hidden="true">#</a></h4><p><a href="./Type.Type.Matrix3x3.html"><code>Matrix3x3</code></a></p><p>返回一个三维矩阵</p><h4 id="defined-in-54" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-54" aria-hidden="true">#</a></h4><p>Type/index.d.ts:2036</p>',748),o=[n];function i(l,h,s,c,p,u){return a(),t("div",null,o)}const y=e(d,[["render",i]]);export{g as __pageData,y as default};
