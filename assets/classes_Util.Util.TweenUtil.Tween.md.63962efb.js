import{_ as e,c as t,o as a,a as d}from"./app.8e21f956.js";const u=JSON.parse('{"title":"Class: Tween<T>","description":"","frontmatter":{},"headers":[{"level":2,"title":"Type parameters","slug":"type-parameters","link":"#type-parameters","children":[]},{"level":2,"title":"Table of contents","slug":"table-of-contents","link":"#table-of-contents","children":[{"level":3,"title":"Constructors","slug":"constructors","link":"#constructors","children":[]},{"level":3,"title":"Methods","slug":"methods","link":"#methods","children":[]}]},{"level":2,"title":"Constructors","slug":"constructors-1","link":"#constructors-1","children":[{"level":3,"title":"constructor","slug":"constructor","link":"#constructor","children":[]}]},{"level":2,"title":"Methods","slug":"methods-1","link":"#methods-1","children":[{"level":3,"title":"chain","slug":"chain","link":"#chain","children":[]},{"level":3,"title":"delay","slug":"delay","link":"#delay","children":[]},{"level":3,"title":"duration","slug":"duration","link":"#duration","children":[]},{"level":3,"title":"easing","slug":"easing","link":"#easing","children":[]},{"level":3,"title":"end","slug":"end","link":"#end","children":[]},{"level":3,"title":"getID","slug":"getid","link":"#getid","children":[]},{"level":3,"title":"group","slug":"group","link":"#group","children":[]},{"level":3,"title":"interpolation","slug":"interpolation","link":"#interpolation","children":[]},{"level":3,"title":"isPaused","slug":"ispaused","link":"#ispaused","children":[]},{"level":3,"title":"isPlaying","slug":"isplaying","link":"#isplaying","children":[]},{"level":3,"title":"onComplete","slug":"oncomplete","link":"#oncomplete","children":[]},{"level":3,"title":"onRepeat","slug":"onrepeat","link":"#onrepeat","children":[]},{"level":3,"title":"onStart","slug":"onstart","link":"#onstart","children":[]},{"level":3,"title":"onStop","slug":"onstop","link":"#onstop","children":[]},{"level":3,"title":"onUpdate","slug":"onupdate","link":"#onupdate","children":[]},{"level":3,"title":"pause","slug":"pause","link":"#pause","children":[]},{"level":3,"title":"repeat","slug":"repeat","link":"#repeat","children":[]},{"level":3,"title":"repeatDelay","slug":"repeatdelay","link":"#repeatdelay","children":[]},{"level":3,"title":"resume","slug":"resume","link":"#resume","children":[]},{"level":3,"title":"start","slug":"start","link":"#start","children":[]},{"level":3,"title":"stop","slug":"stop","link":"#stop","children":[]},{"level":3,"title":"stopChainedTweens","slug":"stopchainedtweens","link":"#stopchainedtweens","children":[]},{"level":3,"title":"to","slug":"to","link":"#to","children":[]},{"level":3,"title":"update","slug":"update","link":"#update","children":[]},{"level":3,"title":"yoyo","slug":"yoyo","link":"#yoyo","children":[]}]}],"relativePath":"classes/Util.Util.TweenUtil.Tween.md"}'),n={name:"classes/Util.Util.TweenUtil.Tween.md"},i=d(`<p><a href="./../README.html">auto-mwapi-lib</a> / <a href="./../modules.html">Exports</a> / <a href="./../modules/Util.html">Util</a> / <a href="./../modules/Util.Util.html">Util</a> / <a href="./../modules/Util.Util.TweenUtil.html">TweenUtil</a> / Tween</p><h1 id="class-tween-t" tabindex="-1">Class: Tween&lt;T&gt; <a class="header-anchor" href="#class-tween-t" aria-hidden="true">#</a></h1><p><a href="./../modules/Util.Util.html">Util</a>.<a href="./../modules/Util.Util.TweenUtil.html">TweenUtil</a>.Tween</p><p><strong><code>Author</code></strong></p><p>huipeng.jia</p><p><strong><code>Description</code></strong></p><p>补间(动画)（来自 in-between）是一个概念，允许你以平滑的方式更改对象的属性。 你只需告诉它哪些属性要更改，当补间结束运行时它们应该具有哪些最终值，以及这需要多长时间， 补间引擎将负责计算从起始点到结束点的值。</p><p><strong><code>Network Status</code></strong></p><p>usage: 双端</p><h2 id="type-parameters" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters" aria-hidden="true">#</a></h2><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>T</code></td><td style="text-align:left;">extends <a href="./../modules/Util.Util.TweenUtil.html#unknownprops"><code>UnknownProps</code></a></td></tr></tbody></table><h2 id="table-of-contents" tabindex="-1">Table of contents <a class="header-anchor" href="#table-of-contents" aria-hidden="true">#</a></h2><h3 id="constructors" tabindex="-1">Constructors <a class="header-anchor" href="#constructors" aria-hidden="true">#</a></h3><ul><li><a href="./Util.Util.TweenUtil.Tween.html#constructor">constructor</a></li></ul><h3 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-hidden="true">#</a></h3><ul><li><a href="./Util.Util.TweenUtil.Tween.html#chain">chain</a></li><li><a href="./Util.Util.TweenUtil.Tween.html#delay">delay</a></li><li><a href="./Util.Util.TweenUtil.Tween.html#duration">duration</a></li><li><a href="./Util.Util.TweenUtil.Tween.html#easing">easing</a></li><li><a href="./Util.Util.TweenUtil.Tween.html#end">end</a></li><li><a href="./Util.Util.TweenUtil.Tween.html#getid">getID</a></li><li><a href="./Util.Util.TweenUtil.Tween.html#group">group</a></li><li><a href="./Util.Util.TweenUtil.Tween.html#interpolation">interpolation</a></li><li><a href="./Util.Util.TweenUtil.Tween.html#ispaused">isPaused</a></li><li><a href="./Util.Util.TweenUtil.Tween.html#isplaying">isPlaying</a></li><li><a href="./Util.Util.TweenUtil.Tween.html#oncomplete">onComplete</a></li><li><a href="./Util.Util.TweenUtil.Tween.html#onrepeat">onRepeat</a></li><li><a href="./Util.Util.TweenUtil.Tween.html#onstart">onStart</a></li><li><a href="./Util.Util.TweenUtil.Tween.html#onstop">onStop</a></li><li><a href="./Util.Util.TweenUtil.Tween.html#onupdate">onUpdate</a></li><li><a href="./Util.Util.TweenUtil.Tween.html#pause">pause</a></li><li><a href="./Util.Util.TweenUtil.Tween.html#repeat">repeat</a></li><li><a href="./Util.Util.TweenUtil.Tween.html#repeatdelay">repeatDelay</a></li><li><a href="./Util.Util.TweenUtil.Tween.html#resume">resume</a></li><li><a href="./Util.Util.TweenUtil.Tween.html#start">start</a></li><li><a href="./Util.Util.TweenUtil.Tween.html#stop">stop</a></li><li><a href="./Util.Util.TweenUtil.Tween.html#stopchainedtweens">stopChainedTweens</a></li><li><a href="./Util.Util.TweenUtil.Tween.html#to">to</a></li><li><a href="./Util.Util.TweenUtil.Tween.html#update">update</a></li><li><a href="./Util.Util.TweenUtil.Tween.html#yoyo">yoyo</a></li></ul><h2 id="constructors-1" tabindex="-1">Constructors <a class="header-anchor" href="#constructors-1" aria-hidden="true">#</a></h2><h3 id="constructor" tabindex="-1">constructor <a class="header-anchor" href="#constructor" aria-hidden="true">#</a></h3><p>• <strong>new Tween</strong>&lt;<code>T</code>&gt;(<code>obj</code>, <code>group?</code>)</p><p><strong><code>Description</code></strong></p><p>补间构造函数</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><h4 id="type-parameters-1" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters-1" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>T</code></td><td style="text-align:left;">extends <a href="./../modules/Util.Util.TweenUtil.html#unknownprops"><code>UnknownProps</code></a></td></tr></tbody></table><h4 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>obj</code></td><td style="text-align:left;"><code>T</code></td><td style="text-align:left;">usage: 要创建补间的对象类型</td></tr><tr><td style="text-align:left;"><code>group?</code></td><td style="text-align:left;"><code>false</code> | <a href="./Util.Util.TweenUtil.Group.html"><code>Group</code></a></td><td style="text-align:left;">usage: 要创建的补间对象的分组 default: mainGroup</td></tr></tbody></table><h4 id="defined-in" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in" aria-hidden="true">#</a></h4><p>Util/index.d.ts:1006</p><h2 id="methods-1" tabindex="-1">Methods <a class="header-anchor" href="#methods-1" aria-hidden="true">#</a></h2><h3 id="chain" tabindex="-1">chain <a class="header-anchor" href="#chain" aria-hidden="true">#</a></h3><p>▸ <strong>chain</strong>(<code>...tweens</code>): <a href="./Util.Util.TweenUtil.Tween.html"><code>Tween</code></a>&lt;<code>T</code>&gt;</p><p><strong><code>Description</code></strong></p><p>将（多个）补间对象链接到当前补间对象。在当前补间结束的时候立即启动链接的补间</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><p><strong><code>Example</code></strong></p><p>使用示例: 示例</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">// A结束后启动B</span></span>
<span class="line"><span style="color:#A6ACCD;">tweenA.chain(tweenB)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// A-B循环</span></span>
<span class="line"><span style="color:#A6ACCD;">tweenA.chain(tweenB)</span></span>
<span class="line"><span style="color:#A6ACCD;">tweenB.chain(tweenA)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// A结束后同时启动B,C</span></span>
<span class="line"><span style="color:#A6ACCD;">tweenA.chain(tweenB, tweenC)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h4 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>...tweens</code></td><td style="text-align:left;"><a href="./Util.Util.TweenUtil.Tween.html"><code>Tween</code></a>&lt;<code>any</code>&gt;[]</td><td style="text-align:left;">usage: 要链接的补间对象（数组）</td></tr></tbody></table><h4 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-hidden="true">#</a></h4><p><a href="./Util.Util.TweenUtil.Tween.html"><code>Tween</code></a>&lt;<code>T</code>&gt;</p><p>当前补间对象，可链式调用</p><h4 id="defined-in-1" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-1" aria-hidden="true">#</a></h4><p>Util/index.d.ts:1158</p><hr><h3 id="delay" tabindex="-1">delay <a class="header-anchor" href="#delay" aria-hidden="true">#</a></h3><p>▸ <strong>delay</strong>(<code>amount?</code>): <a href="./Util.Util.TweenUtil.Tween.html"><code>Tween</code></a>&lt;<code>T</code>&gt;</p><p><strong><code>Description</code></strong></p><p>延迟启动</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><h4 id="parameters-2" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-2" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>amount?</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">usage: 延迟时间，单位：ms。 default: 0</td></tr></tbody></table><h4 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-hidden="true">#</a></h4><p><a href="./Util.Util.TweenUtil.Tween.html"><code>Tween</code></a>&lt;<code>T</code>&gt;</p><p>当前补间对象，可链式调用</p><h4 id="defined-in-2" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-2" aria-hidden="true">#</a></h4><p>Util/index.d.ts:1095</p><hr><h3 id="duration" tabindex="-1">duration <a class="header-anchor" href="#duration" aria-hidden="true">#</a></h3><p>▸ <strong>duration</strong>(<code>d?</code>): <a href="./Util.Util.TweenUtil.Tween.html"><code>Tween</code></a>&lt;<code>T</code>&gt;</p><p><strong><code>Description</code></strong></p><p>设置完成补间需要的时间（周期）</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><h4 id="parameters-3" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-3" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>d?</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">usage: 完成补间需要的时间，单位：ms。 default: 1000</td></tr></tbody></table><h4 id="returns-2" tabindex="-1">Returns <a class="header-anchor" href="#returns-2" aria-hidden="true">#</a></h4><p><a href="./Util.Util.TweenUtil.Tween.html"><code>Tween</code></a>&lt;<code>T</code>&gt;</p><p>当前补间对象，可链式调用</p><h4 id="defined-in-3" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-3" aria-hidden="true">#</a></h4><p>Util/index.d.ts:1039</p><hr><h3 id="easing" tabindex="-1">easing <a class="header-anchor" href="#easing" aria-hidden="true">#</a></h3><p>▸ <strong>easing</strong>(<code>easingFunction?</code>): <a href="./Util.Util.TweenUtil.Tween.html"><code>Tween</code></a>&lt;<code>T</code>&gt;</p><p><strong><code>Description</code></strong></p><p>设置缓动函数</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><h4 id="parameters-4" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-4" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>easingFunction?</code></td><td style="text-align:left;"><a href="./../modules/Util.Util.TweenUtil.html#easingfunction"><code>EasingFunction</code></a></td><td style="text-align:left;">usage: 缓动函数 default: Easing.Linear.None</td></tr></tbody></table><h4 id="returns-3" tabindex="-1">Returns <a class="header-anchor" href="#returns-3" aria-hidden="true">#</a></h4><p><a href="./Util.Util.TweenUtil.Tween.html"><code>Tween</code></a>&lt;<code>T</code>&gt;</p><p>当前补间对象，可链式调用</p><h4 id="defined-in-4" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-4" aria-hidden="true">#</a></h4><p>Util/index.d.ts:1131</p><hr><h3 id="end" tabindex="-1">end <a class="header-anchor" href="#end" aria-hidden="true">#</a></h3><p>▸ <strong>end</strong>(): <a href="./Util.Util.TweenUtil.Tween.html"><code>Tween</code></a>&lt;<code>T</code>&gt;</p><p><strong><code>Description</code></strong></p><p>将当前补间置为目标状态</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><h4 id="returns-4" tabindex="-1">Returns <a class="header-anchor" href="#returns-4" aria-hidden="true">#</a></h4><p><a href="./Util.Util.TweenUtil.Tween.html"><code>Tween</code></a>&lt;<code>T</code>&gt;</p><p>当前补间对象，可链式调用</p><h4 id="defined-in-5" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-5" aria-hidden="true">#</a></h4><p>Util/index.d.ts:1059</p><hr><h3 id="getid" tabindex="-1">getID <a class="header-anchor" href="#getid" aria-hidden="true">#</a></h3><p>▸ <strong>getID</strong>(): <code>number</code></p><p><strong><code>Description</code></strong></p><p>获取当前补间对象的 ID</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><h4 id="returns-5" tabindex="-1">Returns <a class="header-anchor" href="#returns-5" aria-hidden="true">#</a></h4><p><code>number</code></p><p>当前补间对象的 ID</p><h4 id="defined-in-6" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-6" aria-hidden="true">#</a></h4><p>Util/index.d.ts:1012</p><hr><h3 id="group" tabindex="-1">group <a class="header-anchor" href="#group" aria-hidden="true">#</a></h3><p>▸ <strong>group</strong>(<code>group?</code>): <a href="./Util.Util.TweenUtil.Tween.html"><code>Tween</code></a>&lt;<code>T</code>&gt;</p><p><strong><code>Description</code></strong></p><p>设置当前补间对象的分组</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><h4 id="parameters-5" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-5" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>group?</code></td><td style="text-align:left;"><a href="./Util.Util.TweenUtil.Group.html"><code>Group</code></a></td><td style="text-align:left;">usage: 新的分组 default: mainGroup</td></tr></tbody></table><h4 id="returns-6" tabindex="-1">Returns <a class="header-anchor" href="#returns-6" aria-hidden="true">#</a></h4><p><a href="./Util.Util.TweenUtil.Tween.html"><code>Tween</code></a>&lt;<code>T</code>&gt;</p><p>当前补间对象，可链式调用</p><h4 id="defined-in-7" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-7" aria-hidden="true">#</a></h4><p>Util/index.d.ts:1088</p><hr><h3 id="interpolation" tabindex="-1">interpolation <a class="header-anchor" href="#interpolation" aria-hidden="true">#</a></h3><p>▸ <strong>interpolation</strong>(<code>interpolationFunction?</code>): <a href="./Util.Util.TweenUtil.Tween.html"><code>Tween</code></a>&lt;<code>T</code>&gt;</p><p><strong><code>Description</code></strong></p><p>设置插值函数</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><h4 id="parameters-6" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-6" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>interpolationFunction?</code></td><td style="text-align:left;"><a href="./../modules/Util.Util.TweenUtil.html#interpolationfunction"><code>InterpolationFunction</code></a></td><td style="text-align:left;">usage: 插值函数 default: Interpolation.Linear</td></tr></tbody></table><h4 id="returns-7" tabindex="-1">Returns <a class="header-anchor" href="#returns-7" aria-hidden="true">#</a></h4><p><a href="./Util.Util.TweenUtil.Tween.html"><code>Tween</code></a>&lt;<code>T</code>&gt;</p><p>当前补间对象，可链式调用</p><h4 id="defined-in-8" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-8" aria-hidden="true">#</a></h4><p>Util/index.d.ts:1138</p><hr><h3 id="ispaused" tabindex="-1">isPaused <a class="header-anchor" href="#ispaused" aria-hidden="true">#</a></h3><p>▸ <strong>isPaused</strong>(): <code>boolean</code></p><p><strong><code>Description</code></strong></p><p>获取当前补间对象是否为暂停状态。</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><h4 id="returns-8" tabindex="-1">Returns <a class="header-anchor" href="#returns-8" aria-hidden="true">#</a></h4><p><code>boolean</code></p><p>true-暂停；false-在补间。</p><h4 id="defined-in-9" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-9" aria-hidden="true">#</a></h4><p>Util/index.d.ts:1024</p><hr><h3 id="isplaying" tabindex="-1">isPlaying <a class="header-anchor" href="#isplaying" aria-hidden="true">#</a></h3><p>▸ <strong>isPlaying</strong>(): <code>boolean</code></p><p><strong><code>Description</code></strong></p><p>获取当前补间对象是否在补间过程。没结束补间的情况下，即使暂停，也会返回 true。</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><h4 id="returns-9" tabindex="-1">Returns <a class="header-anchor" href="#returns-9" aria-hidden="true">#</a></h4><p><code>boolean</code></p><p>true-在补间过程中；false-不在补间过程，未开始或已结束。</p><h4 id="defined-in-10" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-10" aria-hidden="true">#</a></h4><p>Util/index.d.ts:1018</p><hr><h3 id="oncomplete" tabindex="-1">onComplete <a class="header-anchor" href="#oncomplete" aria-hidden="true">#</a></h3><p>▸ <strong>onComplete</strong>(<code>callback?</code>): <a href="./Util.Util.TweenUtil.Tween.html"><code>Tween</code></a>&lt;<code>T</code>&gt;</p><p><strong><code>Description</code></strong></p><p>当补间正常完成（即不停止）时触发，补间对象作为第一个参数传入</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><h4 id="parameters-7" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-7" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>callback?</code></td><td style="text-align:left;">(<code>object</code>: <code>T</code>) =&gt; <code>void</code></td><td style="text-align:left;">usage: 要绑定的回调函数 default: undefined</td></tr></tbody></table><h4 id="returns-10" tabindex="-1">Returns <a class="header-anchor" href="#returns-10" aria-hidden="true">#</a></h4><p><a href="./Util.Util.TweenUtil.Tween.html"><code>Tween</code></a>&lt;<code>T</code>&gt;</p><p>当前补间对象，可链式调用</p><h4 id="defined-in-11" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-11" aria-hidden="true">#</a></h4><p>Util/index.d.ts:1190</p><hr><h3 id="onrepeat" tabindex="-1">onRepeat <a class="header-anchor" href="#onrepeat" aria-hidden="true">#</a></h3><p>▸ <strong>onRepeat</strong>(<code>callback?</code>): <a href="./Util.Util.TweenUtil.Tween.html"><code>Tween</code></a>&lt;<code>T</code>&gt;</p><p><strong><code>Description</code></strong></p><p>每次补间完成并即将开始下一次重复时触发，补间对象作为第一个参数传入</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><h4 id="parameters-8" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-8" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>callback?</code></td><td style="text-align:left;">(<code>object</code>: <code>T</code>) =&gt; <code>void</code></td><td style="text-align:left;">usage: 要绑定的回调函数 default: undefined</td></tr></tbody></table><h4 id="returns-11" tabindex="-1">Returns <a class="header-anchor" href="#returns-11" aria-hidden="true">#</a></h4><p><a href="./Util.Util.TweenUtil.Tween.html"><code>Tween</code></a>&lt;<code>T</code>&gt;</p><p>当前补间对象，可链式调用</p><h4 id="defined-in-12" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-12" aria-hidden="true">#</a></h4><p>Util/index.d.ts:1183</p><hr><h3 id="onstart" tabindex="-1">onStart <a class="header-anchor" href="#onstart" aria-hidden="true">#</a></h3><p>▸ <strong>onStart</strong>(<code>callback?</code>): <a href="./Util.Util.TweenUtil.Tween.html"><code>Tween</code></a>&lt;<code>T</code>&gt;</p><p><strong><code>Description</code></strong></p><p>在补间开始之前触发，补间对象作为第一个参数传入</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><p><strong><code>Precautions</code></strong></p><ol><li>在补间开始之前执行，即在计算之前。</li><li>每个补间只能执行一次。当通过 repeat() 重复补间时，它将不会运行。</li></ol><h4 id="parameters-9" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-9" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>callback?</code></td><td style="text-align:left;">(<code>object</code>: <code>T</code>) =&gt; <code>void</code></td><td style="text-align:left;">usage: 要绑定的回调函数 default: undefined</td></tr></tbody></table><h4 id="returns-12" tabindex="-1">Returns <a class="header-anchor" href="#returns-12" aria-hidden="true">#</a></h4><p><a href="./Util.Util.TweenUtil.Tween.html"><code>Tween</code></a>&lt;<code>T</code>&gt;</p><p>当前补间对象，可链式调用</p><h4 id="defined-in-13" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-13" aria-hidden="true">#</a></h4><p>Util/index.d.ts:1168</p><hr><h3 id="onstop" tabindex="-1">onStop <a class="header-anchor" href="#onstop" aria-hidden="true">#</a></h3><p>▸ <strong>onStop</strong>(<code>callback?</code>): <a href="./Util.Util.TweenUtil.Tween.html"><code>Tween</code></a>&lt;<code>T</code>&gt;</p><p><strong><code>Description</code></strong></p><p>当通过 stop() 显式停止补间时触发，补间对象作为第一个参数传入</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><p><strong><code>Precautions</code></strong></p><ol><li>在正常完成时不触发。</li><li>在任何可能的链接补间都停止之后才触发。</li></ol><h4 id="parameters-10" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-10" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>callback?</code></td><td style="text-align:left;">(<code>object</code>: <code>T</code>) =&gt; <code>void</code></td><td style="text-align:left;">usage: 要绑定的回调函数 default: undefined</td></tr></tbody></table><h4 id="returns-13" tabindex="-1">Returns <a class="header-anchor" href="#returns-13" aria-hidden="true">#</a></h4><p><a href="./Util.Util.TweenUtil.Tween.html"><code>Tween</code></a>&lt;<code>T</code>&gt;</p><p>当前补间对象，可链式调用</p><h4 id="defined-in-14" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-14" aria-hidden="true">#</a></h4><p>Util/index.d.ts:1200</p><hr><h3 id="onupdate" tabindex="-1">onUpdate <a class="header-anchor" href="#onupdate" aria-hidden="true">#</a></h3><p>▸ <strong>onUpdate</strong>(<code>callback?</code>): <a href="./Util.Util.TweenUtil.Tween.html"><code>Tween</code></a>&lt;<code>T</code>&gt;</p><p><strong><code>Description</code></strong></p><p>每次补间更新时触发，补间对象作为第一个参数传入</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><p><strong><code>Precautions</code></strong></p><p>回调触发时，属性已更新完成。</p><h4 id="parameters-11" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-11" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>callback?</code></td><td style="text-align:left;">(<code>object</code>: <code>T</code>, <code>elapsed</code>: <code>number</code>) =&gt; <code>void</code></td><td style="text-align:left;">usage: 要绑定的回调函数 default: undefined</td></tr></tbody></table><h4 id="returns-14" tabindex="-1">Returns <a class="header-anchor" href="#returns-14" aria-hidden="true">#</a></h4><p><a href="./Util.Util.TweenUtil.Tween.html"><code>Tween</code></a>&lt;<code>T</code>&gt;</p><p>当前补间对象，可链式调用</p><h4 id="defined-in-15" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-15" aria-hidden="true">#</a></h4><p>Util/index.d.ts:1176</p><hr><h3 id="pause" tabindex="-1">pause <a class="header-anchor" href="#pause" aria-hidden="true">#</a></h3><p>▸ <strong>pause</strong>(<code>time?</code>): <a href="./Util.Util.TweenUtil.Tween.html"><code>Tween</code></a>&lt;<code>T</code>&gt;</p><p><strong><code>Description</code></strong></p><p>暂停补间，可以指定暂停生效时间，默认为当前时间</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><p><strong><code>Precautions</code></strong></p><p>接受一个参数 time。如果你使用它，那么暂停不会立即生效，直到特定时刻，否则会尽快暂停（i.e 即在下次调用 update）</p><h4 id="parameters-12" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-12" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>time?</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">usage: 暂停生效时间 default: 当前时间</td></tr></tbody></table><h4 id="returns-15" tabindex="-1">Returns <a class="header-anchor" href="#returns-15" aria-hidden="true">#</a></h4><p><a href="./Util.Util.TweenUtil.Tween.html"><code>Tween</code></a>&lt;<code>T</code>&gt;</p><p>当前补间对象，可链式调用</p><h4 id="defined-in-16" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-16" aria-hidden="true">#</a></h4><p>Util/index.d.ts:1067</p><hr><h3 id="repeat" tabindex="-1">repeat <a class="header-anchor" href="#repeat" aria-hidden="true">#</a></h3><p>▸ <strong>repeat</strong>(<code>times?</code>): <a href="./Util.Util.TweenUtil.Tween.html"><code>Tween</code></a>&lt;<code>T</code>&gt;</p><p><strong><code>Description</code></strong></p><p>设置重复次数, 补间的总次数将是重复参数加上一个初始补间</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><p><strong><code>Precautions</code></strong></p><p>会重置当前的重复次数</p><p><strong><code>Example</code></strong></p><p>使用示例: 示例</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">tween.repeat(10) // 循环10次</span></span>
<span class="line"><span style="color:#A6ACCD;">tween.repeat(Infinity) // 无限循环</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h4 id="parameters-13" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-13" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>times?</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">usage: 重复次数 default: 0</td></tr></tbody></table><h4 id="returns-16" tabindex="-1">Returns <a class="header-anchor" href="#returns-16" aria-hidden="true">#</a></h4><p><a href="./Util.Util.TweenUtil.Tween.html"><code>Tween</code></a>&lt;<code>T</code>&gt;</p><p>当前补间对象，可链式调用</p><h4 id="defined-in-17" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-17" aria-hidden="true">#</a></h4><p>Util/index.d.ts:1109</p><hr><h3 id="repeatdelay" tabindex="-1">repeatDelay <a class="header-anchor" href="#repeatdelay" aria-hidden="true">#</a></h3><p>▸ <strong>repeatDelay</strong>(<code>amount?</code>): <a href="./Util.Util.TweenUtil.Tween.html"><code>Tween</code></a>&lt;<code>T</code>&gt;</p><p><strong><code>Description</code></strong></p><p>设置重复补间时的延迟启动时间</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><h4 id="parameters-14" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-14" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>amount?</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">usage: 延迟时间，单位：ms。 default: undefined</td></tr></tbody></table><h4 id="returns-17" tabindex="-1">Returns <a class="header-anchor" href="#returns-17" aria-hidden="true">#</a></h4><p><a href="./Util.Util.TweenUtil.Tween.html"><code>Tween</code></a>&lt;<code>T</code>&gt;</p><p>当前补间对象，可链式调用</p><h4 id="defined-in-18" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-18" aria-hidden="true">#</a></h4><p>Util/index.d.ts:1116</p><hr><h3 id="resume" tabindex="-1">resume <a class="header-anchor" href="#resume" aria-hidden="true">#</a></h3><p>▸ <strong>resume</strong>(<code>time?</code>): <a href="./Util.Util.TweenUtil.Tween.html"><code>Tween</code></a>&lt;<code>T</code>&gt;</p><p><strong><code>Description</code></strong></p><p>恢复补间，可以指定恢复生效时间，默认为当前时间</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><p><strong><code>Precautions</code></strong></p><p>接受一个参数 time。如果你使用它，那么恢复不会立即生效，直到特定时刻，否则会尽快恢复（i.e 即在下次调用 update）</p><h4 id="parameters-15" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-15" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>time?</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">usage: 恢复生效时间 default: 当前时间</td></tr></tbody></table><h4 id="returns-18" tabindex="-1">Returns <a class="header-anchor" href="#returns-18" aria-hidden="true">#</a></h4><p><a href="./Util.Util.TweenUtil.Tween.html"><code>Tween</code></a>&lt;<code>T</code>&gt;</p><p>当前补间对象，可链式调用</p><h4 id="defined-in-19" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-19" aria-hidden="true">#</a></h4><p>Util/index.d.ts:1075</p><hr><h3 id="start" tabindex="-1">start <a class="header-anchor" href="#start" aria-hidden="true">#</a></h3><p>▸ <strong>start</strong>(<code>time?</code>): <a href="./Util.Util.TweenUtil.Tween.html"><code>Tween</code></a>&lt;<code>T</code>&gt;</p><p><strong><code>Description</code></strong></p><p>启动补间，可以指定启动生效时间，默认为当前时间</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><p><strong><code>Precautions</code></strong></p><p>接受一个参数 time。如果你使用它，那么补间不会立即开始，直到特定时刻，否则会尽快启动（i.e 即在下次调用 update）</p><h4 id="parameters-16" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-16" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>time?</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">usage: 启动生效时间 default: 当前时间</td></tr></tbody></table><h4 id="returns-19" tabindex="-1">Returns <a class="header-anchor" href="#returns-19" aria-hidden="true">#</a></h4><p><a href="./Util.Util.TweenUtil.Tween.html"><code>Tween</code></a>&lt;<code>T</code>&gt;</p><p>当前补间对象，可链式调用</p><h4 id="defined-in-20" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-20" aria-hidden="true">#</a></h4><p>Util/index.d.ts:1047</p><hr><h3 id="stop" tabindex="-1">stop <a class="header-anchor" href="#stop" aria-hidden="true">#</a></h3><p>▸ <strong>stop</strong>(): <a href="./Util.Util.TweenUtil.Tween.html"><code>Tween</code></a>&lt;<code>T</code>&gt;</p><p><strong><code>Description</code></strong></p><p>停止补间，停止一个从未开始或已经停止的补间没有任何效果。 没有错误被抛出</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><h4 id="returns-20" tabindex="-1">Returns <a class="header-anchor" href="#returns-20" aria-hidden="true">#</a></h4><p><a href="./Util.Util.TweenUtil.Tween.html"><code>Tween</code></a>&lt;<code>T</code>&gt;</p><p>当前补间对象，可链式调用</p><h4 id="defined-in-21" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-21" aria-hidden="true">#</a></h4><p>Util/index.d.ts:1053</p><hr><h3 id="stopchainedtweens" tabindex="-1">stopChainedTweens <a class="header-anchor" href="#stopchainedtweens" aria-hidden="true">#</a></h3><p>▸ <strong>stopChainedTweens</strong>(): <a href="./Util.Util.TweenUtil.Tween.html"><code>Tween</code></a>&lt;<code>T</code>&gt;</p><p><strong><code>Description</code></strong></p><p>停止所有链接到当前补间的补间对象</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><h4 id="returns-21" tabindex="-1">Returns <a class="header-anchor" href="#returns-21" aria-hidden="true">#</a></h4><p><a href="./Util.Util.TweenUtil.Tween.html"><code>Tween</code></a>&lt;<code>T</code>&gt;</p><p>当前补间对象，可链式调用</p><h4 id="defined-in-22" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-22" aria-hidden="true">#</a></h4><p>Util/index.d.ts:1081</p><hr><h3 id="to" tabindex="-1">to <a class="header-anchor" href="#to" aria-hidden="true">#</a></h3><p>▸ <strong>to</strong>(<code>properties</code>, <code>duration?</code>): <a href="./Util.Util.TweenUtil.Tween.html"><code>Tween</code></a>&lt;<code>T</code>&gt;</p><p><strong><code>Description</code></strong></p><p>设置补间的目标状态和完成补间需要的时间</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><h4 id="parameters-17" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-17" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>properties</code></td><td style="text-align:left;"><a href="./../modules/Util.Util.TweenUtil.html#unknownprops"><code>UnknownProps</code></a></td><td style="text-align:left;">usage: 目标状态</td></tr><tr><td style="text-align:left;"><code>duration?</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">usage: 完成补间需要的时间，单位：ms。 default: 1000</td></tr></tbody></table><h4 id="returns-22" tabindex="-1">Returns <a class="header-anchor" href="#returns-22" aria-hidden="true">#</a></h4><p><a href="./Util.Util.TweenUtil.Tween.html"><code>Tween</code></a>&lt;<code>T</code>&gt;</p><p>当前补间对象，可链式调用</p><h4 id="defined-in-23" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-23" aria-hidden="true">#</a></h4><p>Util/index.d.ts:1032</p><hr><h3 id="update" tabindex="-1">update <a class="header-anchor" href="#update" aria-hidden="true">#</a></h3><p>▸ <strong>update</strong>(<code>time?</code>, <code>autoStart?</code>): <code>boolean</code></p><p><strong><code>Description</code></strong></p><p>更新当前的补间。一般来说会由所属的补间组自动调用，无需手动调用。</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><h4 id="parameters-18" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-18" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>time?</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">usage: 要绑定的回调函数 default: 当前时间</td></tr><tr><td style="text-align:left;"><code>autoStart?</code></td><td style="text-align:left;"><code>boolean</code></td><td style="text-align:left;">usage: 是否自动开始 default: true</td></tr></tbody></table><h4 id="returns-23" tabindex="-1">Returns <a class="header-anchor" href="#returns-23" aria-hidden="true">#</a></h4><p><code>boolean</code></p><p>true-如果当前更新之后尚未结束, false-当前更新之后补间结束</p><h4 id="defined-in-24" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-24" aria-hidden="true">#</a></h4><p>Util/index.d.ts:1208</p><hr><h3 id="yoyo" tabindex="-1">yoyo <a class="header-anchor" href="#yoyo" aria-hidden="true">#</a></h3><p>▸ <strong>yoyo</strong>(<code>yoyo?</code>): <a href="./Util.Util.TweenUtil.Tween.html"><code>Tween</code></a>&lt;<code>T</code>&gt;</p><p><strong><code>Description</code></strong></p><p>设置往复（悠悠球效果）。这个功能只有在独自使用 repeat 时才有效果。 启用后，补间的行为将像悠悠球一样，会在起始值和结束值之间往复，而不是从头开始重复。</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><h4 id="parameters-19" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-19" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>yoyo?</code></td><td style="text-align:left;"><code>boolean</code></td><td style="text-align:left;">usage: 是否启用 yoyo default: false</td></tr></tbody></table><h4 id="returns-24" tabindex="-1">Returns <a class="header-anchor" href="#returns-24" aria-hidden="true">#</a></h4><p><a href="./Util.Util.TweenUtil.Tween.html"><code>Tween</code></a>&lt;<code>T</code>&gt;</p><p>当前补间对象，可链式调用</p><h4 id="defined-in-25" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-25" aria-hidden="true">#</a></h4><p>Util/index.d.ts:1124</p>`,387),r=[i];function l(o,s,h,c,p,f){return a(),t("div",null,r)}const T=e(n,[["render",l]]);export{u as __pageData,T as default};
