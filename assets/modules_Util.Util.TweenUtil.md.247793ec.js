import{_ as e,c as n,o as a,a as t}from"./app.8e21f956.js";const g=JSON.parse('{"title":"Namespace: TweenUtil","description":"","frontmatter":{},"headers":[{"level":2,"title":"Table of contents","slug":"table-of-contents","link":"#table-of-contents","children":[{"level":3,"title":"Classes","slug":"classes","link":"#classes","children":[]},{"level":3,"title":"Type Aliases","slug":"type-aliases","link":"#type-aliases","children":[]},{"level":3,"title":"Variables","slug":"variables","link":"#variables","children":[]},{"level":3,"title":"Functions","slug":"functions","link":"#functions","children":[]}]},{"level":2,"title":"Type Aliases","slug":"type-aliases-1","link":"#type-aliases-1","children":[{"level":3,"title":"EasingFunction","slug":"easingfunction","link":"#easingfunction","children":[]},{"level":3,"title":"InterpolationFunction","slug":"interpolationfunction","link":"#interpolationfunction","children":[]},{"level":3,"title":"UnknownProps","slug":"unknownprops","link":"#unknownprops","children":[]}]},{"level":2,"title":"Variables","slug":"variables-1","link":"#variables-1","children":[{"level":3,"title":"TWEEN","slug":"tween","link":"#tween","children":[]}]},{"level":2,"title":"Functions","slug":"functions-1","link":"#functions-1","children":[{"level":3,"title":"nextId","slug":"nextid","link":"#nextid","children":[]}]}],"relativePath":"modules/Util.Util.TweenUtil.md"}'),s={name:"modules/Util.Util.TweenUtil.md"},i=t(`<p><a href="./../README.html">auto-mwapi-lib</a> / <a href="./../modules.html">Exports</a> / <a href="./Util.html">Util</a> / <a href="./Util.Util.html">Util</a> / TweenUtil</p><h1 id="namespace-tweenutil" tabindex="-1">Namespace: TweenUtil <a class="header-anchor" href="#namespace-tweenutil" aria-hidden="true">#</a></h1><p><a href="./Util.html">Util</a>.<a href="./Util.Util.html">Util</a>.TweenUtil</p><p><strong><code>Author</code></strong></p><p>huipeng.jia</p><p><strong><code>Description</code></strong></p><p>补间(动画)（来自 in-between）是一个概念，允许你以平滑的方式更改对象的属性。 你只需告诉它哪些属性要更改，当补间结束运行时它们应该具有哪些最终值，以及这需要多长时间， 补间引擎将负责计算从起始点到结束点的值。</p><p><strong><code>Network Status</code></strong></p><p>usage: 双端</p><p><strong><code>Example</code></strong></p><p>使用示例: 示例</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">// 例如，position对象拥有x和y两个坐标:</span></span>
<span class="line"><span style="color:#A6ACCD;">var position = {x: 100, y: 0};</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// 如果你想将x坐标的值从100变成200，首先为位置创建一个补间(tween)</span></span>
<span class="line"><span style="color:#A6ACCD;">var tween = new Extension.TweenUtil.Tween(position)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// 然后告诉 tween 我们想要在1000毫秒内以动画的形式移动 x 的位置</span></span>
<span class="line"><span style="color:#A6ACCD;">tween.to({x: 200}, 1000)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// tween 已经被创建了，但是它还没被激活(使用)，你需要这样启动：</span></span>
<span class="line"><span style="color:#A6ACCD;">tween.start()</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// 最后，想要成功的完成这种效果，你需要在主函数中调用TWEEN.update</span></span>
<span class="line"><span style="color:#A6ACCD;">onUpdate() {</span></span>
<span class="line"><span style="color:#A6ACCD;">   // [...]</span></span>
<span class="line"><span style="color:#A6ACCD;">   Extension.TweenUtil.TWEEN.update()</span></span>
<span class="line"><span style="color:#A6ACCD;">   // [...]</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// tween 可以链式调用！ 每个tween函数都会返回tween实例，所以你可以重写创建tween的代码：</span></span>
<span class="line"><span style="color:#A6ACCD;">var tween = new Extension.TweenUtil.Tween(position).to({x: 200}, 1000).start()</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="table-of-contents" tabindex="-1">Table of contents <a class="header-anchor" href="#table-of-contents" aria-hidden="true">#</a></h2><h3 id="classes" tabindex="-1">Classes <a class="header-anchor" href="#classes" aria-hidden="true">#</a></h3><ul><li><a href="./../classes/Util.Util.TweenUtil.Group.html">Group</a></li><li><a href="./../classes/Util.Util.TweenUtil.Sequence.html">Sequence</a></li><li><a href="./../classes/Util.Util.TweenUtil.Tween.html">Tween</a></li></ul><h3 id="type-aliases" tabindex="-1">Type Aliases <a class="header-anchor" href="#type-aliases" aria-hidden="true">#</a></h3><ul><li><a href="./Util.Util.TweenUtil.html#easingfunction">EasingFunction</a></li><li><a href="./Util.Util.TweenUtil.html#interpolationfunction">InterpolationFunction</a></li><li><a href="./Util.Util.TweenUtil.html#unknownprops">UnknownProps</a></li></ul><h3 id="variables" tabindex="-1">Variables <a class="header-anchor" href="#variables" aria-hidden="true">#</a></h3><ul><li><a href="./Util.Util.TweenUtil.html#tween">TWEEN</a></li></ul><h3 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-hidden="true">#</a></h3><ul><li><a href="./Util.Util.TweenUtil.html#nextid">nextId</a></li></ul><h2 id="type-aliases-1" tabindex="-1">Type Aliases <a class="header-anchor" href="#type-aliases-1" aria-hidden="true">#</a></h2><h3 id="easingfunction" tabindex="-1">EasingFunction <a class="header-anchor" href="#easingfunction" aria-hidden="true">#</a></h3><p>Ƭ <strong>EasingFunction</strong>: (<code>amount</code>: <code>number</code>) =&gt; <code>number</code></p><h4 id="type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration" aria-hidden="true">#</a></h4><p>▸ (<code>amount</code>): <code>number</code></p><p><strong><code>Description</code></strong></p><p>缓动函数的类型定义</p><h5 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-hidden="true">#</a></h5><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>amount</code></td><td style="text-align:left;"><code>number</code></td></tr></tbody></table><h5 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-hidden="true">#</a></h5><p><code>number</code></p><h4 id="defined-in" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in" aria-hidden="true">#</a></h4><p>Util/index.d.ts:927</p><hr><h3 id="interpolationfunction" tabindex="-1">InterpolationFunction <a class="header-anchor" href="#interpolationfunction" aria-hidden="true">#</a></h3><p>Ƭ <strong>InterpolationFunction</strong>: (<code>v</code>: <code>number</code>[], <code>k</code>: <code>number</code>) =&gt; <code>number</code></p><h4 id="type-declaration-1" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration-1" aria-hidden="true">#</a></h4><p>▸ (<code>v</code>, <code>k</code>): <code>number</code></p><p><strong><code>Description</code></strong></p><p>插值函数的类型定义</p><h5 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-hidden="true">#</a></h5><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>v</code></td><td style="text-align:left;"><code>number</code>[]</td></tr><tr><td style="text-align:left;"><code>k</code></td><td style="text-align:left;"><code>number</code></td></tr></tbody></table><h5 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-hidden="true">#</a></h5><p><code>number</code></p><h4 id="defined-in-1" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-1" aria-hidden="true">#</a></h4><p>Util/index.d.ts:853</p><hr><h3 id="unknownprops" tabindex="-1">UnknownProps <a class="header-anchor" href="#unknownprops" aria-hidden="true">#</a></h3><p>Ƭ <strong>UnknownProps</strong>: <code>Record</code>&lt;<code>string</code>, <code>any</code>&gt;</p><p><strong><code>Description</code></strong></p><p>补间属性的定义，用户可以自由扩展</p><h4 id="defined-in-2" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-2" aria-hidden="true">#</a></h4><p>Util/index.d.ts:1213</p><h2 id="variables-1" tabindex="-1">Variables <a class="header-anchor" href="#variables-1" aria-hidden="true">#</a></h2><h3 id="tween" tabindex="-1">TWEEN <a class="header-anchor" href="#tween" aria-hidden="true">#</a></h3><p>• <code>Const</code> <strong>TWEEN</strong>: <a href="./../classes/Util.Util.TweenUtil.Group.html"><code>Group</code></a></p><p><strong><code>Description</code></strong></p><p>全局补间组单例。在创建补间时，如不特别指定，默认添加到该补间组</p><h4 id="defined-in-3" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-3" aria-hidden="true">#</a></h4><p>Util/index.d.ts:1223</p><h2 id="functions-1" tabindex="-1">Functions <a class="header-anchor" href="#functions-1" aria-hidden="true">#</a></h2><h3 id="nextid" tabindex="-1">nextId <a class="header-anchor" href="#nextid" aria-hidden="true">#</a></h3><p>▸ <strong>nextId</strong>(): <code>number</code></p><p><strong><code>Description</code></strong></p><p>获取下一个 ID 的全局方法</p><p><strong><code>Effect</code></strong></p><p>调用端生效</p><h4 id="returns-2" tabindex="-1">Returns <a class="header-anchor" href="#returns-2" aria-hidden="true">#</a></h4><p><code>number</code></p><p>下一个 ID</p><h4 id="defined-in-4" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in-4" aria-hidden="true">#</a></h4><p>Util/index.d.ts:848</p>`,73),l=[i];function r(o,d,c,p,h,u){return a(),n("div",null,l)}const b=e(s,[["render",r]]);export{g as __pageData,b as default};
